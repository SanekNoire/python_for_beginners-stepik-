# print("Дано:", round(10/3))
# print("Дано:", pow(10,3), ",", 10**3)
# print("Дано:", abs(-7))
# print("Дано:", min(1,2,-1,0,-10,6), max(2,2,0,1337))
# print("Дано:", 10//3)
# print("Результат: ", 7, 15, ".", sep=" ", end="\n")
# print("Другий \n\tряд:\"")

# input("Скільки вам років?: ")

# lesson 4 - Переменные и типы данных
# import math

# число = 228 # int

# print("Результат:", число)
#
# dadaya = 1337
# print("Результат:", dadaya)
#
# однацелая = 14.88 # float
# текст = "Результат:" # string
# буля = False # bool
#
# str_num = '10' #string
#
# print(текст + str(однацелая))
# print(число + int(str_num))
#
# print("Вот", end=" ")
# print("\\")
# print("\nЭта строка " + "вряд ли "
#       "asdas")
# print("800 - 50 =", 800-50)
# print(107/4)
# print(107//4)
# print(107%4)

# name = input("Привет как тебя зовут? ")
# print(name)
# print("Привет,", name)
# input("\nНажмите Ентер, чтобы закончить")

# my_name = input("Як вас звати? \n\t")
# country = input("З якої ви країни? ")
# old = input("Скільки вам років? ")

# Ливерпуль = input()
# print(Ливерпуль, "- чемпион!")

# i_was = input()
# born = input()
# this_way = input()
# print(i_was)
# print(born)
# print(this_way)

# hello = input()
# its = input()
# me = input()
# print(me)
# print(its)
# print(hello)

# number1 = int(input("Введите число1: "))
# number2 = int(input("Введите число2: "))
# print("Деление: ", number1 // number2)
# print("Умножение: ", number1 * number2)
# number1 = 25
# print(number1)


# ******************************************
# Тема урока: sep, end, переменные, PEP 8

# print("aaasd", "\n", "bbbbb", "ccccccccc", sep="*", end="\n")
# print("aaasd", "\n", "bbbbb", "ccccccccc", sep="*", end="*FINISH")

# zvezdochka = input()
# raz = input()
# dva = input()
# tri = input()
# print(raz, dva, tri, sep=zvezdochka)

# name, surname = "Sasha", "Zheliezniak"
# print(name, surname)

# num1 = input()
# num2 = input()
# print(int(num1) + int(num2))

# num1 = int(input())
# print(num1)
# print(num1 + 1)
# print(num1 + 2)

# num1 = int(input())
# num2 = int(input())
# num3 = int(input())
# print(num1 + num2 + num3)

# num1 = int(input())
# print("Обьем =", num1 ** 3)
# print("Площадь полной поверхности", 6 * num1 ** 2)

# num_a = int(input())
# num_b = int(input())
# print(3 * ((num_a + num_b) ** 3) + 275 * (num_b ** 2) - 127 * num_a - 41)

# num1 = int(input())
# print("Следующее за числом", num1, "число:", num1 + 1)
# print("Для числа", num1, "предыдущее число:", num1 - 1)

# monitor = int(input())
# sys_block = int(input())
# keyboard = int(input())
# mouse = int(input())
# print((monitor + sys_block + keyboard + mouse) * 3)

# num1 = int(input())
# num2 = int(input())
# print(str(num1), "+", str(num2), "=", num1 + num2)
# print(str(num1), "-", str(num2), "=", num1 - num2)
# print(str(num1), "*", str(num2), "=", num1 * num2)

# num_a = int(input())
# num_d = int(input())
# num_n = int(input())
# print(num_a + num_d * (num_n - 1))

# num1 = int(input())
# print(num1, num1 * 2, num1 * 3, num1 * 4, num1 * 5, sep="---")

# print(82 // 3 ** 2 % 7)

# num_b1 = int(input())
# num_q = int(input())
# num_n = int(input())
# print(num_b1 * num_q ** (num_n - 1))

# num_cm = int(input())
# print(num_cm // 100)

# schoolboy = int(input())
# orange = int(input())
# print(orange // schoolboy)
# print(orange % schoolboy)

# peoples = int(input())
# print((peoples + 1) // 2)

# number_of_vagon = int(input())   # Вписываем место в купе (4 места в каждом)
# print((number_of_vagon + 3) // 4)

# minutes = int(input())   # Минуты переводим в час и мин.
# print(minutes, "мин - это", minutes // 60, "час", minutes % 60, "минут.")

# _______________________________________________________________________________________________
# Обработка цифр числа
# При помощи операции нахождения остатка и целочисленного...
# ... деления можно достаточно несложно вычислить любую цифру числа.

# num = 17
# a = num % 10
# b = num // 10
#
# print(a)
# print(b)

# последняя цифра числа определяется всегда как остаток от деления числа на 10(% 10).
# Чтобы отщепить последнюю цифру от числа, необходимо разделить его нацело на 10(// 10)

# num = 754
#
# # просто берем последнюю цифру числа через % 10
# a = num % 10
#
# # сначала откидываем последнюю цифру числа через // 10 и получаем число 75
# # далее берем последнюю цифру у числа 75 через % 10
# b = num // 10 % 10
#
# # просто откидываем две последние цифры у числа через // 100
# c = num // 100
#
# print(a)
# print(b)
# print(c)

# num = int(input())
# print('Число десятков =', num // 10)
# print('Число единиц =', num % 10)
# print("Сумма цифр:", (num // 10) + (num % 10))

# num = int(input())
# last_digit = num % 10
# first_digit = num // 10
#
# print('Наоборот цифры числа =', (last_digit * 10) + first_digit)

# Напишите программу, в которую вводится трехзначное число и которая выводит на экран его цифры (через запятую)

# num = int(input())
# number3 = num % 10
# number2 = num // 10 % 10
# number1 = num // 100 % 10
# print(number1, number2, number3, sep=",")

# Напишите программу, в которой рассчитывается сумма и произведение цифр положительного трехзначного числа.
# number = int(input())
# num3 = number % 10
# num2 = number // 10 % 10
# num1 = number // 100 % 10
# print("Сумма цифр =", num1 + num2 + num3)
# print("Произведение цифр =", num1 * num2 * num3)

# Дано трехзначное число abc, в котором все цифры различны. Напишите программу, которая выводит шесть чисел, образованных при перестановке цифр заданного числа
# number = int(input())
# num_c = number % 10
# num_b = number // 10 % 10
# num_a = number // 100 % 10
# print(num_a, num_b, num_c, sep="")
# print(num_a, num_c, num_b, sep="")
# print(num_b, num_a, num_c, sep="")
# print(num_b, num_c, num_a, sep="")
# print(num_c, num_a, num_b, sep="")
# print(num_c, num_b, num_a, sep="")

# Напишите программу для нахождения цифр четырёхзначного числа.
# number = int(input())
# num_4 = number % 10
# num_3 = number // 10 % 10
# num_2 = number // 100 % 10
# num_1 = number // 1000 % 10
# print("Цифра в позиции тысяч равна", num_1)
# print("Цифра в позиции сотен равна", num_2)
# print("Цифра в позиции десятков равна", num_3)
# print("Цифра в позиции единиц равна", num_4)

# n = int(input())
# print(" =", n // 10000)
# print(" =", n % 10000 // 1000)
# print(" =", n % 100 // 10)
# print(" =", n % 1000 // 100)
# print(" =", n % 10)

# print("*****************")
# print("*               *")
# print("*               *")
# print("*****************")

# num_a = int(input())
# num_b = int(input())
# print("Квадрат суммы", num_a, "и", num_b, "равен", (num_a + num_b)**2)
# print("Сумма квадратов", num_a, "и", num_b, "равна", (num_a ** 2) + (num_b ** 2))

# num_a = int(input())
# num_b = int(input())
# num_c = int(input())
# num_d = int(input())
# print((num_a ** num_b) + (num_c ** num_d))

# num = int(input())   # Из 1, 2, 3, 4 сделать 1+11+111=, 2+22+222= и тд.
# print(num + (num * 10 + num) + (num * 111))

# quote228 = "Думаю, на мировой арене можно будет бла бла бла..."
# print("Цитата:\n", quote228)
# print("\nВерхним регистром:\n", quote228.upper())
# print("\nНерхним регистром:\n", quote228.lower())
# print("\nЗаголовком:\n", quote228.title())
# print("\nЗаменить слова:\n", quote228.replace("бла бла бла...", "закончить войну.",))
# print("\nПоменять регист с верхнего на нижний, и наоборот:\n", quote228.swapcase())
# print("\nПервая буква прописная:\n", quote228.capitalize())
# print("\nУбрать все интервалы: пробелы и тд:\n", quote228.strip())

# car = int(input("Стоиость затрат на машину:"))
# print(car)

# age = int(input("Скільки тобі років?:"))
# seconds = age * 356 * 24 * 60 * 60
# print("Твій вік в секундах:", seconds, "сек.")

# ______________________________________________________________________________________
# ______________________________________________________________________________________
# ______________________________________________________________________________________
# ______________________________________________________________________________________
# __________________________________RANDOM, IF, ELSE____________________________________

# загружаем модуль random
# import random
# rnd1 = random.randint(1, 21)
# rnd2 = random.randrange(21) + 1
# total = rnd1 + rnd2
# print("При броске выпало:", rnd1, "и", rnd2, "\nВ сумме:", total)

# print("Welcome!")
# password = input("Press password please:\n")
# if password == "secret":
#     print("Доступ открыт, нажмите Ентер.")
# else:
#     print("Пароль не верен. Доступ закрыт!")
# # или так
# if password != "secret":
#     print("Пароль не верен. Доступ закрыт!")

# num1 = int(input())
# num2 = int(input())
# if num1 < num2:
#     print(num1, 'меньше чем', num2)
# if num1 > num2:
#     print(num1, 'больше чем', num2)
# if num1 == num2:  # используем двойное равенство
#     print(num1, 'равно', num2)
# if num1 != num2:
#     print(num1, 'не равно', num2)

# age = int(input("Ваш возраст?: "))
# if 0 <= age <= 10:
#     print("Ваш возраст:", age, ", вы являетесь ребенком.")
# if 10 < age <= 17:
#     print("Ваш возраст:", age, ", вы являетесь подростком.")
# else:
#     print.("Ваш возраст:", age, ", вы взрослый человек")

# print("***Компьютерный датчик настрения***"), \
# print("\nЯ ощущаю ваше настроение...")
# input("Нажмите Ентер, чтобы датчик показал ваше настроение.")
# import random
# mood = random.randint(1, 3)
# if mood == 1:
#     print("""Вы сегодня радостный =)
#     .________.
#     |        |
#     | O < O  |
#     | `___`  |
#     |________|
#     """)
# elif mood == 2:
#     print("""Вы сегодня обычный =|
#     .________.
#     |        |
#     | O < O  |
#     | _____  |
#     |________|
#     """)
# elif mood == 3:
#     print("""Вы сегодня грустный =(
#     .________.
#     |        |
#     | O < O  |
#     | ,```,  |
#     |________|
#     """)

# print("Какой язык програмирования мы изучаем?")
# word = input()
# if word == "Python":
#     print("Да!")
# else:
#     print("Нет!")

# # Напишите программу, которая определяет, состоит ли двузначное число, введенное
# # с клавиатуры, из одинаковых цифр. Если состоит, то программа выводит «ДА»,
# # в противном случае программа выводит «НЕТ
# number = int(input("Введите двузначное число:\n"))
# firts_num = number // 10 % 10
# last_num = number % 10
# if firts_num == last_num:
#     print("Да, число состоит из двух одинаковых цифр!", firts_num, "и", last_num)
# else:
#     print("Нет, цифры разные!")


# # Напишите программу, которая считывает три числа и подсчитывает количество чётных чисел.
# num1, num2, num3 = int(input()), int(input()), int(input())
#
# counter = 0  # переменная счётчик
# if num1 % 2 == 0:
#     counter = counter + 1  # увеличиваем счётчик на 1
# if num2 % 2 == 0:
#     counter = counter + 1  # увеличиваем счётчик на 1
# if num3 % 2 == 0:
#     counter = counter + 1  # увеличиваем счётчик на 1
#
# print(counter)

# i = int(input())
# if i // 2 != 0:
#     print(i, 'нечётное')
# else:
#     print(i, 'чётное')

# # Напишите программу, которая считывает три числа и подсчитывает количество чётных чисел
# num1 = int(input("Число 1:"))
# num2 = int(input("Число 2:"))
# num3 = int(input("Число 3:"))
# num4 = int(input("Число 4:"))
# num5 = int(input("Число 5:"))
# qqq = 0
# if num1 % 2 == 0:
#     qqq = qqq + 1
# if num2 % 2 == 0:
#     qqq = qqq + 1
# if num3 % 2 == 0:
#     qqq = qqq + 1
# if num4 % 2 == 0:
#     qqq = qqq + 1
# if num5 % 2 == 0:
#     qqq = qqq + 1
# print("Кол-во четных чисел:", qqq)

# # Создать двухфакторную регистрацию пароля

# password1 = input()
# password2 = input()
# if password2 == password1:
#     print("Пароль принят")
# else:
#     print("Пароль не принят")

# # Напишите программу, которая определяет, является число четным или нечетным.
#
# num = int(input())
# last_num = num % 2
# if last_num == 0:
#     print("Четное")
# else:
#     print("Нечетное")

# # Напишите программу, которая проверяет, что для заданного четырехзначного числа выполняется
# # следующее соотношение: сумма первой и последней цифр равна разности второй и третьей цифр
#
# num = int(input())
# number4 = num % 10
# number3 = num // 10 % 10
# number2 = num // 100 % 10
# number1 = num // 1000 % 10
# raznica2_3 = number2 - number3
# summa1_4 = number1 + number4
# if summa1_4 == raznica2_3:
#     print("ДА")
# else:
#     print("НЕТ")

# # Напишите программу, которая проверяет, что для заданного четырехзначного числа выполняется следующее
# # соотношение: сумма первой и последней цифр равна разности второй и третьей цифр
#
# num = int(input())
# number4 = num % 10
# number3 = num // 10 % 10
# number2 = num // 100 % 10
# number1 = num // 1000 % 10
# if number2 - number3 == number1 + number4:
#     print("ДА")
# else:
#     print("НЕТ")

## Напишите программу, которая определяет, разрешен ли пользователю доступ к интернет-ресурсу или нет

# year_old = int(input())
# if year_old >= 18:
#     print("Доступ разрешен")
# else:
#     print("Доступ запрещен")

## Напишите программу, которая определяет, являются ли три заданных числа (в указанном порядке)
## последовательными членами арифметической прогрессии.

# num1 = int(input())
# num2 = int(input())
# num3 = int(input())
# if num3 - num2 == num2 - num1:
#     print("YES")
# else:
#     print("NO")

# # Напишите программу, которая определяет наименьшее из двух чисел
#
# num1 = int(input())
# num2 = int(input())
# if num1 > num2:
#     print(num2)
# else:
#     print(num1)

## Напишите программу, которая определяет наименьшее из четырёх чисел.

# num1 = int(input())
# num2 = int(input())
# num3 = int(input())
# num4 = int(input())
# number1_2 = num1, num2
# if num1 < num2:
#     number1_2 = num1
# else:
#     number1_2 = num2
# number3_4 = num3, num4
# if num3 < num4:
#     number3_4 = num3
# else:
#     number3_4 = num4
# if number1_2 < number3_4:
#     print(number1_2)
# else:
#     print(number3_4)

## Напишите программу, которая по введённому возрасту пользователя сообщает, к какой возрастной группе он относится

# years_old = int(input())
# if years_old <= 13:
#     print("детство")
# elif 14 <= years_old <= 24:
#     print("молодость")
# elif 25 <= years_old <= 59:
#     print("зрелость")
# elif 60 <= years_old:
#     print("старость")

## Напишите программу, которая считывает три числа и подсчитывает сумму только положительных чисел

# num1 = int(input())
# num2 = int(input())
# num3 = int(input())
# if num1 <= 0:
#     num1 = 0
# if num2 <= 0:
#     num2 = 0
# if num3 <= 0:
#     num3 = 0
# print(num1 + num2 + num3)

# _______________________________WHILE__________________________________________________________
# ______________________________________________________________________________________________

# response = ""
# while response != "Потому что":
#     response = input("Почему?\n")
# print("Ну ладно =(")

# import random
# counter = random.randint(0, 10)
# while counter == 10:
#     print("counter")

# health = 10
# trolls = 0
# damage = 3
# while health > 0:
#     trolls += 1
#     health -= damage
#     print("Взмахнув мечом, ваш герой истреляет троля, \nно сам получает повреждени на", damage, "очков.")

# print("Добро пожаловать в ресторан!")
# chai = int(input("Кажется, все столики заняты, сколько долларов чаевых дадите?:"))
# while chai < 5:
#     print("Придется подождать, все места заняты")
# print("ывфывф")

## Считалка до 10
# num = 0
# while num != 10:
#     num += 1
#     print(num)

# # Алиса
# print("Привет, какое твое имя:")
# name = input()
# if name == "Алиса":
#     print("Привет", name)
#     age = int(input("Я должен убедиться что это точно ты, сколько тебе лет?:"))
#     if age == 15:
#         print("Да, это точно ты. Путь открыт!")
#     if age < 10:
#         print("Ты точно не Алиса, ребёнок!")
#     elif age > 200:   # Сперва нужно ставить условие > 200, если сперва поставить > 70, то все года
#                       # которые больше 200, тоже будут больше 70 и условие сработает
#         print("Алиса не бессмертна, ты вампир, уходи!")
#     elif age > 70:
#         print("Ты слишком стара для Алисы, ты - ", age, "летняя бабка!")
# else:
#     print("Тебя тут не ждут! Уходи!")

# name = ""
# while name != "your name":
#     print("Type your name: ")
#     name = input()
# print("Thanks")

# #Частная сеть с логинами и паролями
#
# username = ""
# while not username:
#     username = input("Введите логин: ")
# password = ""
# while not password:
#     password = input("Введите пароль: ")
# if username == "SanekNoire" and password == "tahir2281337":
#     print("Добро пожаловать,", username)
# elif username == "alexandernoire228" and password == "tahir2281337wolfmq":
#     print("Привет,", username)
# elif username == "guest" or password == "guest":
#     print("Добро пожаловать,", username)
# else:
#     print("Такой пользователь не зарегестрирован, вход запрещен")

# # Напишите программу, которая определяет, является ли заданное натуральное число трёхзначным
#
# num = int(input())
# if 100 <= num <= 999:
#     print("ДА")
# else:
#     print("НЕТ")

# # Напишите программу, которая проверяет, что все три цифры натурального трёхзначного числа различны.
#
# num = int(input())
# number3 = num % 10
# number2 = num // 10 % 10
# number1 = num // 100 % 10
# if number1 != number2 and number3 != number2:
#     print("Все три цифры разные")
# else:
#     print("Нет, все 3 цифры не разные")

# Напишите программу, которая по координатам точки, не лежащей на осях координат,
# определяет номер координатной четверти, в которой она находится.

# num_x = int(input("X: "))
# num_y = int(input("Y: "))
# if num_x > 0 and num_y > 0:
#     print("1 четверть")
# if num_x < 0 and num_y > 0:
#     print("2 четверть")
# if num_x < 0 and num_y < 0:
#     print("3 четверть")
# if num_x > 0 and num_y < 0:
#     print("4 четверть")

# num = int(input())
# if num >-1 and num < 17:
#     print("Принадлежит")
# else:
#     print("Не принадлежит")

# num = int(input())
# if num <= -3 or num >= 7:
#     print("Принадлежит")
# else:
#     print("Не принадлежит")

# num = int(input())
# if -30 < num <= -2 or 7 < num <= 25:
#     print("Принадлежит")
# else:
#     print("Не принадлежит")

# # Назовем число красивым, если оно является четырехзначным и делится нацело на 7 или на 17
# # Напишите программу, определяющую, является ли введённое число красивым.
# # Программа должна вывести «YES», если число является красивым, или «NO» в противном случае.
#
# num = int(input())
# if 1000 <= num <= 9999 and (num % 7 == 0 or num % 17 == 0):
#     print("YES")
# else:
#     print("NO")

# Напишите программу, которая принимает три положительных числа
# и определяет, существует ли невырожденный треугольник с такими сторонами.

# num_A = int(input())
# num_B = int(input())
# num_C = int(input())
# if num_A > 0 < num_B and num_C > 0 and (num_A + num_B > num_C and num_A + num_C > num_B and num_B + num_C > num_A):
#     print("YES")
# else:
#     print("NO")

# # Напишите программу, которая определяет, является ли год с данным номером високосным.
# # Если год является високосным, то выведите «YES», иначе выведите «NO».
# # Год является високосным, если его номер кратен 4, но не кратен 100, или если он кратен 400.
#
# year = int(input())
# if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0:
#     print("YES")
# else:
#     print("NO")

# Даны две различные клетки шахматной доски. Напишите программу, которая определяет, может ли ладья
# попасть с первой клетки на вторую одним ходом. Программа получает на вход четыре числа от 1 до 8
# каждое, задающие номер столбца и номер строки сначала для первой клетки, потом для второй клетки.
# Программа должна вывести «YES», если из первой клетки ходом ладьи можно попасть во вторую, или «NO» в противном случае.

# stolbecY1 = int(input())
# strokaX1 = int(input())
# stolbecY2 = int(input())
# strokaX2 = int(input())
# if stolbecY1 == stolbecY2 or strokaX1 == strokaX2:
#     print("YES")
# else:
#     print("NO")

# Даны две различные клетки шахматной доски. Напишите программу,  которая определяет, может ли король
# попасть с первой клетки на вторую одним ходом. Программа получает на вход четыре числа от 1 до 8
# каждое, задающие номер столбца и номер строки сначала для первой клетки, потом для второй клетки.
# Программа должна вывести «YES», если из первой клетки ходом короля можно попасть во вторую, или «NO» в противном случае.

# stolbecY1 = int(input())
# strokaX1 = int(input())
# stolbecY2 = int(input())
# strokaX2 = int(input())
# if (stolbecY1 == stolbecY2 or stolbecY1 == stolbecY2 + 1 or stolbecY1 == stolbecY2 - 1) and (strokaX1 == strokaX2 or strokaX1 == strokaX2 + 1 or strokaX1 == strokaX2 - 1):
#     print("YES")
# else:
#     print("NO")

# Даны три целых числа. Определите, сколько среди них совпадающих. Программа должна вывести
# одно из чисел: 3 (если все совпадают), 2 (если два совпадает) или 0 (если все числа различны)

# num_a = int(input())
# num_b = int(input())
# num_c = int(input())
# if num_a == num_b == num_c:
#     print("3 числа совпадают")
# elif num_a == num_b != num_c or num_a != num_b == num_c or num_a == num_c != num_b:
#     print("2 числа совпадают")
# else:
#     print("0 чисел совпадают")

# a, b, c = int(input()), int(input()), int(input())
#
# if a == b == c:
#     print(3)
# elif a == b or b == c or a == c:
#     print(2)
# else:
#     print(0)

# Зум бросил вызов Флэшу и предложил ему честный поединок в виде гонки вокруг магнетара.
# В случае проигрыша эта нейтронная звезда зарядится и уничтожит мир, поэтому Флэш решил не рисковать
# без причины и узнать у своего друга Циско Рамона, есть ли смысл принимать вызов.
# Циско получил данные, что скорость Зума равна n, а скорость Флэша равна k.
# Напишите программу, которая должна вывести ответ Циско на вопрос Флэша

# speed_zoom = int(input())
# speed_flash = int(input())
# if speed_zoom > speed_flash:
#     print("NO")
# elif speed_zoom < speed_flash:
#     print("YES")
# else:
#     print("Don't know")

# Напишите программу, которая принимает три положительных числа и определяет вид треугольника,
# длины сторон которого равны введенным числам.

# side1 = int(input())
# side2 = int(input())
# side3 = int(input())
# if side1 == side2 == side3:
#     print("Равносторонний")
# elif side1 == side2 or side2 == side3 or side3 == side1:
#     print("Равнобедренный")
# else:
#     print("Разносторонний")

# # Даны три различных целых числа. Напишите программу, которая находит среднее по величине число.
#
# num1 = int(input())
# num2 = int(input())
# num3 = int(input())
# if num1 < num2 < num3 or num1 > num2 > num3:
#     print(num2)
# elif num2 < num1 < num3 or num2 > num1 > num3:
#     print(num1)
# elif num1 < num3 < num2 or num1 > num3 > num2:
#     print(num3)

# # Дан порядковый номер месяца(1,2,…,12). Напишите программу, которая выводит на экран количество
# # дней в этом месяце.Принять, что год является невисокосным.
#
# mounth = int(input())
# if mounth == 2:
#     print("28")
# elif mounth == 4 or mounth == 6 or mounth == 9 or mounth == 11:
#     print("30")
# else:
#     print("31")

# # Известен вес боксера-любителя (целое число). Известно, что вес таков, что боксер может быть отнесён
# # к одной из трех весовых категорий:
# # Легкий вес – до 60 кг (невключительно);
# # Первый полусредний вес – до 64 кг (невключительно);
# # Полусредний вес – до 69 кг (невключительно).
# # Напишите программу, определяющую, в какой категории будет выступать данный боксер
#
# veight = int(input())
# if veight < 60:
#     print("Легкий вес")
# elif 60 <= veight < 64:
#     print("Первый полусредний вес")
# else:
#     print("Полусредний вес")

# Напишите программу, которая считывает с клавиатуры два целых числа и строку. Если эта строка является
# обозначением одной из четырёх математических операций (+, -, *, /), то выведите результат
# применения этой операции к введённым ранее числам, в противном случаевыведите
# «Неверная операция» (без кавычек). Если пользователь захочет поделить на ноль,
# выведите текст «На ноль делить нельзя!» (без кавычек).

# num1 = int(input())
# num2 = int(input())
# stroka1 = input()
# if num2 == 0 and stroka1 == "/":
#     print("На ноль делить нельзя!")
# elif stroka1 == "+":
#     print(num1 + num2)
# elif stroka1 == "-":
#     print(num1 - num2)
# elif stroka1 == "*":
#     print(num1 * num2)
# elif stroka1 == "/":
#     print(num1 / num2)
# else:
#     print("Неверная операция")

# Красный, синий и желтый называются основными цветами, потому что их нельзя получить путем смешения
# других цветов. При смешивании двух основных цветов получается вторичный цвет:
# - если смешать красный и синий, то получится фиолетовый;
# - если смешать красный и желтый, то получится оранжевый;
# - если смешать синий и желтый, то получится зеленый.
# Напишите программу, которая считывает названия двух основных цветов для смешивания. Если пользователь
# вводит что-нибудь помимо названий «красный», «синий» или «желтый», то программа должна вывести
# сообщение об ошибке. В противном случае программа должна вывести название вторичного цвета,
# который получится в результате. Если смешать красный и красный, то получится красный и т.д.

# color1 = input()
# color2 = input()
# if color1 == color2:
#     if color1 == "красный" or color1 == "желтый" or color1 == "синий":
#         print(color1)
#     else:
#         print("ошибка цвета")
# elif color1 == "красный" and color2 == "синий" or (color1 == "синий" and color2 == "красный"):
#     print("фиолетовый")
# elif color1 == "красный" and color2 == "желтый" or (color1 == "желтый" and color2 == "красный"):
#     print("оранжевый")
# elif color1 == "синий" and color2 == "желтый" or (color1 == "желтый" and color2 == "синий"):
#     print("зеленый")
# else:
#     print("ошибка цвета")

# На колесе рулетки карманы пронумерованы от 0 до 36. Ниже приведены цвета карманов:
# - карман 0 зеленый;
# - для карманов с 1 по 10 карманы с нечетным номером имеют красный цвет, карманы с четным номером – черный;
# - для карманов с 11 по 18 карманы с нечетным номером имеют черный цвет, карманы с четным номером – красный;
# - для карманов с 19 по 28 карманы с нечетным номером имеют красный цвет, карманы с четным номером – черный;
# - для карманов с 29 по 36 карманы с нечетным номером имеют черный цвет, карманы с четным номером – красный.
# Напишите программу, которая считывает номер кармана и показывает, является ли этот карман зеленым, красным или черным.
# Программа должна вывести сообщение об ошибке, если пользователь вводит число, которое лежит вне диапазона
# от 0 до 36.


# num = int(input())
# if num < 0 or num > 36:
#     print("ошибка ввода")
# elif num == 0:
#     print("зеленый")
# elif 1 <= num <= 10:
#     if num % 2 == 0:
#         print("черный")
#     else:
#         print("красный")
# elif 11 <= num <= 18:
#     if num % 2 == 0:
#         print("красный")
#     else:
#         print("черный")
# elif 19 <= num <= 28:
#     if num % 2 == 0:
#         print("черный")
#     else:
#         print("красный")
# elif 29 <= num <= 36:
#     if num % 2 == 0:
#         print("красный")
#     else:
#         print("черный")

# На числовой прямой даны два отрезка: [a1; b1] и [a2; b2]. Напишите программу, которая находит их пересечение.
# Пересечением двух отрезков может быть:
# - отрезок;
# - точка;
# - пустое множество.
# Формат входных данных
# На вход программе подаются 4 целых числа a1, b1, a2, b2, каждое на отдельной строке. Гарантируется,
# что a1 < b1 и a2 < b2.

# a1 = int(input())
# b1 = int(input())
# a2 = int(input())
# b2 = int(input())
# if a2 > a1 and a2 > b1 or (b2 < a1 and b2 < b1):
#     print("пустое множество")
# elif a1 == a2 and b1 == b2:
#     print(a1, b2)
# elif a2 >= a1:
#     if a2 == b1 and b2 > b1:
#         print(a2)
#     elif a2 > a1 and b2 > b1:
#         print(a2, b1)
#     elif a2 > a1 and b2 < b1:
#         print(a2,b2)
#     elif b2 == b1 and a2 > a1:
#         print(b2, a2)
#     elif a1 == a2 and b2 < b1:
#         print(a1, b2)
# elif a2 <= a1:
#     if b2 == a1 and a2 < a1:
#         print(b2)
#     elif b2 < b1 and a2 < a1:
#         print(a1, b2)
#     elif a2 < a1 and b2 > b1:
#         print(a1, b1)
#     elif b1 == b2 and a1 > a2:
#         print(b1, a1)
#     elif a2 == a1 and b2 > b1:
#         print(a2, b1)

# # Напишите программу, которая определяет, оканчивается ли год с данным номером на два нуля.
# # Если год оканчивается, то выведите «YES», иначе выведите «NO».
#
# year = int(input())
# num_4 = year % 10
# num_3 = year // 10 % 10
# if num_4 == 0 and num_3 == 0:
#     print("YES")
# else:
#     print("NO")

# !!!!!!!!!!!!!!!!!! Заданы две клетки шахматной доски. Напишите программу, которая определяет, имеют ли указанные клетки
# один цвет или нет. Если они покрашены в один цвет, то выведите слово «YES»,
# а если в разные цвета, то «NO». !!!!!!!!!!!!!!!!!

# num_X1 = int(input())
# num_Y1 = int(input())
# num_X2 = int(input())
# num_Y2 = int(input())
# if (num_X1 + num_Y1 + num_X2 + num_Y2) % 2 == 0:
#     print("YES")
# else:
#     print("NO")

# Футбольная команда набирает девочек от 10 до 15 лет включительно. Напишите программу,
# которая запрашивает возраст и пол претендента, используя обозначение пола буквы
# m (от male – мужчина) и f (от female – женщина) и определяет подходит ли претендент для
# вступления в команду или нет. Если претендент подходит, то выведите «YES», иначе выведите «NO».
# На вход программе подаётся натуральное число – возраст претендента и буква обозначающая пол m (мужчина) или f (женщина).

# years = int(input())
# sex = input()
# if sex == "f" and 10 <= years <= 15:
#     print("YES")
# else:
#     print("NO")

# # Напишите программу, которая считывает целое число и выводит соответствующую ему римскую цифру.
# # Если число находится вне диапазона 1−10 то программа должна вывести текст «ошибка».
#
# num = int(input())
# if 1 <= num <= 10:
#     if 1 <= num <= 3:
#         one = "I"
#         print(one * num)
#     elif num == 4:
#         print("IV")
#     elif num == 5:
#         print("V")
#     elif num == 6:
#         print("VI")
#     elif num == 7:
#         print("VII")
#     elif num == 8:
#         print("VIII")
#     elif num == 9:
#         print("IX")
#     elif num == 10:
#         print("X")
# else:
#     print("ошибка")

# Напишите программу, которая принимает на вход число и в зависимости от условий выводит
# текст «YES», либо «NO». Условия:
# - если число нечётное, то вывести «YES»;
# - если число чётное в диапазоне от 2 до 5 (включительно), то вывести «NO»;
# - если число чётное в диапазоне от 6 до 20 (включительно), то вывести «YES»;
# - если число чётное и больше 20, то вывести «NO».

# num = int(input())
# if num % 2 != 0:
#     print("YES")
# elif num % 2 == 0 and (2 <= num <= 5):
#     print("NO")
# elif num % 2 == 0 and (6 <= num <= 20):
#     print("YES")
# elif num % 2 == 0 and (num > 20):
#     print("NO")

# # Даны две различные клетки шахматной доски. Напишите программу, которая определяет,
# # может ли слон попасть с первой клетки на вторую одним ходом. Программа получает на вход четыре числа
# # от 1 до 8 каждое, задающие номер столбца и номер строки сначала для первой клетки,
# # потом для второй клетки. Программа должна вывести «YES», если из первой клетки
# # ходом слона можно попасть во вторую или «NO» в противном случае.
#
# X1 = int(input())
# Y1 = int(input())
# X2 = int(input())
# Y2 = int(input())
# if (X1 + Y1) == (X2 + Y2) or (X1 - Y1) == (X2 - Y2):
#     print("YES")
# else:
#     print("NO")

# # Даны две различные клетки шахматной доски. Напишите программу,  которая определяет, может ли
# # конь попасть с первой клетки на вторую одним ходом. Программа получает на вход четыре числа
# # от 1 до 8 каждое, задающие номер столбца и номер строки сначала для первой клетки, потом для
# # второй клетки. Программа должна вывести «YES», если из первой клетки ходом коня можно
# # попасть во вторую или «NO» в противном случае.
#
# X1 = int(input())
# Y1 = int(input())
# X2 = int(input())
# Y2 = int(input())
# if X2 - 2 == X1 and Y2 - 1 == Y1 or (X2 + 2 == X1 and Y2 + 1 == Y1):
#     print("YES")
# elif X2 - 1 == X1 and Y2 - 2 == Y1 or (X2 + 1 == X1 and Y2 + 2 == Y1):
#     print("YES")
# elif X2 + 2 == X1 and Y2 - 1 == Y1 or (X2 - 2 == X1 and Y2 + 1 == Y1):
#     print("YES")
# elif X2 + 1 == X1 and Y2 - 2 == Y1 or (X2 - 1 == X1 and Y2 + 2 == Y1):
#     print("YES")
# else:
#     print("NO")

# # Даны две различные клетки шахматной доски. Напишите программу,  которая определяет, может ли
# # ферзь попасть с первой клетки на вторую одним ходом. Программа получает на вход четыре
# # числа от 1 до 8 каждое, задающие номер столбца и номер строки сначала для первой клетки,
# # потом для второй клетки. Программа должна вывести «YES», если из первой клетки ходом ферзя
# # можно попасть во вторую или «NO» в противном случае.
#
# X1 = int(input())
# Y1 = int(input())
# X2 = int(input())
# Y2 = int(input())
# if (X1 + Y1) == (X2 + Y2) or (X1 - Y1) == (X2 - Y2):
#     print("YES")
# elif Y1 == Y2 or X1 == X2:
#     print("YES")
# else:
#     print("NO")

#################################### INT, MIN, MAX, ABS #########################################

# num1 = 25_000_000
# # num2 = 25000000
# # print(num1)
# # print(num2)

# Напишите программу, которая считывает длины двух катетов в прямоугольном треугольнике и выводит его площадь.

# a = float(input())
# b = float(input())
# print((1 / 2) * a * b)

# Две старушки идут навстречу друг другу с постоянными скоростями V1 и V2 км/ч. Определите,
# через какое время (в часах) старушки встретятся, если расстояние между ними равно S км.

# S = float(input())
# V1 = float(input())
# V2 = float(input())
# V = V1 + V2
# T = S / V
# print(T)

# Напишите программу, которая считывает с клавиатуры одно число и выводит обратное ему. Если при этом
# введённое с клавиатуры число – ноль, то вывести «Обратного числа не существует» (без кавычек).

# num = float(input())
# if num != 0:
#     print(num ** -1)
# else:
#     print("Обратного числа не существует")

# У известного американского писателя Рэя Бредбери есть роман «451 градус по Фаренгейту». Напишите программу,
# которая определяет, какой температуре по шкале Цельсия соответствует указанное значение по шкале Фаренгейта
# Используйте формулу для перевода: C = 5 / 9 * (F - 32).

# F = float(input())
# print((5 / 9) * (F - 32))

# На вход программе подается число n – количество собачьих лет. Напишите программу, которая вычисляет возраст
# собаки в человеческих годах по следующему алгоритму: в течение первых двух лет собачий год
# равен 10.5 человеческим годам, после этого каждый год собаки равен 4 человеческим годам.

# years_dog = float(input())
# if years_dog <= 2:
#     print(years_dog * 10.5)
# else:
#     print((years_dog - 2) * 4 + 21)

# Дано положительное действительное число. Выведите его первую цифру после десятичной точки.

# num = float(input())
# print(int(num * 10 % 10))

# Дано положительное действительное число. Выведите его дробную часть.

# num = float(input())
# drob = int(num)
# print(num - drob)

# a = max(3.14, 2.17, 5)
# print(a)

# Напишите программу, которая находит наименьшее и наибольшее из пяти чисел.

# a = int(input())
# b = int(input())
# c = int(input())
# d = int(input())
# e = int(input())
# print("Наименьшее число =", min(a, b, c, d, e))
# print("Наибольшее число =", max(a, b, c, d, e))

# !!!!!!!!!!!! !!!Напишите программу, которая упорядочивает три числа от большего к меньшему.

# a = int(input())
# b = int(input())
# c = int(input())
# print(max(a, b, c))
# print(a + b + c - max(a, b, c) - min(a, b, c))
# print(min(a, b, c))

# # Назовем число интересным, если в нем разность максимальной и минимальной цифры равняется средней по величине
# # цифре. Напишите программу, которая определяет, интересное число или нет. Если число интересное,
# # следует вывести «Число интересное», иначе - «Число неинтересное».
#
# num = int(input())
# num3 = num % 10
# num2 = num // 10 % 10
# num1 = num // 100 % 10
# if max(num1, num2, num3) - min(num1, num2, num3) == (num1 + num2 + num3) - max(num1, num2, num3) - min(num1, num2, num3):
#     print("Число интересное")
# else:
#     print("Число неинтересное")

# # Даны пять чисел a1, a2, a3, a4, a5. Напишите программу, которая вычисляет сумму их модулей:
# # |a1| + |a2| + |a3| + |a4| + |a5|
#
# a1 = float(input())
# a2 = float(input())
# a3 = float(input())
# a4 = float(input())
# a5 = float(input())
# print(abs(a1) + abs(a2) + abs(a3) + abs(a4) + abs(a5))

# p1 = int(input())
# p2 = int(input())
# q1 = int(input())
# q2 = int(input())
# print(abs(p1 - q1) + abs(p2 - q2))

########################################### STR, LEN(), STR(), IN #########################################

# print(len("asdasd"))   # Считает сколько символов

# Напишите программу, которая выводит текст:
# "Python is a great language!", said Fred. "I don't ever remember having this much fun before."

# print('"Python is a great language!", said Fred.', '"I don' + "'t ever remember having this much fun before." + '"')

# Напишите программу, которая считывает с клавиатуры две строки – имя и фамилию пользователя и выводит фразу:
# «Hello [введенное имя] [введенная фамилия]! You have just delved into Python».

# name = input()
# surname = input()
# print("Hello", name, surname + "! You have just delved into Python")

# Напишите программу, которая считывает с клавиатуры название футбольной команды и выводит фразу:
# «Футбольная команда [введённая строка] имеет длину [длина введённой строки] символов».

# football_name = input()
# print("Футбольная команда", football_name, "имеет длину", len(football_name), "символов")

# Даны названия трех городов. Напишите программу, которая определяет самое короткое и самое длинное название города.

# city1 = input()
# city2 = input()
# city3 = input()
# if min(len(city1), len(city2), len(city3)) == len(city1):
#     print(city1)
# elif min(len(city1), len(city2), len(city3)) == len(city2):
#     print(city2)
# elif min(len(city1), len(city2), len(city3)) == len(city3):
#     print(city3)
# if max(len(city1), len(city2), len(city3)) == len(city1):
#     print(city1)
# elif max(len(city1), len(city2), len(city3)) == len(city2):
#     print(city2)
# elif max(len(city1), len(city2), len(city3)) == len(city3):
#     print(city3)

# Вводятся 3 строки в случайном порядке. Напишите программу, которая выясняет, можно ли из длин
# этих строк построить арифметическую прогрессию.
# *** Сравнить (разницу максимума и среднего числа) и (разницей среднего числа и минимального)

# a = len(input())
# b = len(input())
# c = len(input())
# if max(a, b, c) - ((a + b + c) - max(a, b, c) - min(a, b, c)) == ((a + b + c) - max(a, b, c) - min(a, b, c)) - min(a, b, c):
#     print("YES")
# else:
#     print("NO")
#

# if int(abs(b - a)) == int(abs(c - b)) == int(abs(a - c)):
#     print("YES")
# elif
# else:
#     print("NO")

# if abs(len(b) - len(a)) == abs(len(c) - len(b)) == abs(len(a) - len(c)):
#     print("YES")
# else:
#     print("NO")

# s = input()
# if 'a' in s:
#     print('Введенная строка содержит символ а')
# else:
#     print('Введенная строка не содержит символ а')

# # Проверяет есть ли переменная s в aeiou
# s = input()
# if s in 'aeiou':
#     print('YES')
# else:
#     print("NO")

# # Напишите программу, которая считывает одну строку, после чего выводит «YES», если во введенной
# # строке есть подстрока «синий» и «NO» - в противном случае.
#
# x = input()
# if "синий" in x:
#     print("YES")
# else:
#     print("NO")
#
# # Напишите программу, которая считывает одну строку, после чего выводит «YES», если в введённой
# # строке есть подстрока «суббота» или «воскресенье», и «NO» в противном случае.
#
# x = input()
# if "суббота" in x or "воскресенье" in x:
#     print("YES")
# else:
#     print("NO")

# Будем считать email адрес корректным, если в нем есть символ собачки (@) и точки (.).
# Напишите программу, проверяющую корректность email адреса.

# x = input()
# if "@" in x and "." in x:
#     print("YES")
# else:
#     print("NO")

############################################# МОДУЛЬ "MATH" ####################################

# import math
#
# num1 = math.sqrt(2)     # вычисление квадратного корня из двух
# num2 = math.ceil(3.8)   # округление числа вверх
# num3 = math.floor(3.8)  # округление числа вниз
# print(num1)
# print(num2)
# print(num3)
#
# from math import *   # Импортировать сразу все функии из math, и не прописывать модуль math."функция"
#
# num1 = sqrt(2)     # вычисление корня квадратного из двух
# num2 = ceil(3.8)   # округление числа вверх
# num3 = floor(3.8)  # округление числа вниз
#
# print(num1)
# print(num2)
# print(num3)
#
# from math import sqrt, ceil, floor   # Ипортировать только отдельные ф-ции из модуля math, и не прописывать например math.floor, а просто floor
#
# num1 = sqrt(2)     # вычисление корня квадратного из двух
# num2 = ceil(3.8)   # округление числа вверх
# num3 = floor(3.8)  # округление числа вниз
#
# print(num1)
# print(num2)
# print(num3)

# from math import *

# print(round(4.5454545454545, 2))

# stepik 6.3 - 2/8
# x1 = float(input())
# y1 = float(input())
# x2 = float(input())
# y2 = float(input())
# from math import *
# print(sqrt(pow((x1 - x2), 2) + pow((y1 - y2), 2)))

# stepik 6.3 - 3/8
# Напишите программу определяющую площадь круга и длину окружности по заданному радиусу R

# R = float(input())
# from math import *
# print(pi * pow(R, 2))
# print(2 * pi * R)

# stepik 6.3 - 4/8

# from math import *
# a = float(input())
# b = float(input())
# print((a + b) / 2)
# print(sqrt(a * b))
# print((2 * a * b) / (a + b))
# print(sqrt((a ** 2 + b ** 2) / 2))

# stepik 6.3 - 5/8

# from math import *
# x = float(input())
# x = (x * pi) / 180
# print(sin(x) + cos(x) + tan(x)** 2)

# # stepik 6.3 - 6/8
#
# from math import *
# x = float(input())
# print(ceil(x) + floor(x))

# # stepik 6.3 - 7/8
#
# from math import *
# a = float(input())
# b = float(input())
# c = float(input())
# D = (b ** 2) - (4 * a * c)
# if D > 0:
#     x1 = (-b + sqrt(D)) / (2 * a)
#     x2 = (-b - sqrt(D)) / (2 * a)
#     print(min(x1, x2), "\n", max(x1, x2))
# elif D == 0:
#     print((-b) / (2 * a))
# elif D < 0:
#     print("Нет корней")

# stepik 6.3 - 8/8

# from math import *
# n = float(input())
# a = float(input())
# print((n * (a ** 2)) / (4 * tan(pi / n)))

######################################### ЦИКЛ FOR, WHILE ##########################################

# for i in range(5):
#     num = int(input())
#     print("Квадрат вашего числа равен:", num * num)
# print("Цикл завершен")
#
# print("A")
# print("B")
# for i in range(5):
#     print("C")
#     print("D")
# print("E")

# # Напишите программу, которая выводит слова «Python is awesome!» (без кавычек) 10 раз.
#
# for i in range(10):
#     print("Python is awesome!")

# Дано предложение и количество раз которое его надо повторить. Напишите программу, которая повторяет
# данное предложение нужное количество раз.

# words = input()
# num = int(input())
# for _ in range(num):
#     print(words)

# Напишите программу, которая использует ровно три цикла for для печати следующей последовательности символов:

# for _ in range(6):
#     print("AAA")
# for _ in range(5):
#     print("BBBB")
# print("E")
# for _ in range(9):
#     print("TTTTT")
# print("G")

# На вход программе подается натуральное число n.
# Напишите программу, которая печатает звездный прямоугольник размерами n × 19

# num = int(input())
# for _ in range(num):
#     print(_)

# for i in range(10):
#     print(i, 'Привет')

# Если мы хотим начать с 1, то можем написать код:

# for i in range(10):
#     print(i + 1, 'Привет')

# Если переменная цикла не используется в теле цикла, то указывайте вместо нее
# символ нижнего подчеркивания _

# for _ in range(5):
#     print('Python - awesome!')
#
# for _ in range(1, 10):   # Можно указать "от", "до(не включительно)", "шаг"
#     print(_, 'Python - awesome!')

#
# Напишите программу, которая считывает одну строку текста и выводит 10 строк,
# # пронумерованных от 0 до 9, каждая с указанной строкой текста.
#
# qwerty = input()
# for _ in range(10):
#     print(_, qwerty)

# # На вход программе подается натуральное число n. Напишите программу, которая для каждого из
# # чисел от 0 до n (включительно) выводит фразу: «Квадрат числа [число] равен [число]» (без кавычек).
#
# num = int(input())
# for _ in range(num + 1):
#     print("Квадрат числа", _, "равен", _ * _)

# # На вход программе подается натуральное число n(n ≥ 2) – катет прямоугольного равнобедренного
# # треугольника. Напишите программу, которая выводит звездный треугольник в соответствии с примером.
#
# n = int(input())
# for i in range(n):
#     print((n - i) * "*")

# !!!!!!!!!!!!!! # # На вход программе подается три натуральных числа m,p,n:
# # m: стартовое количество организмов;
# # p: среднесуточное увеличение в %;
# # n: количество дней для размножения.
# # Напишите программу, которая предсказывает размер популяции организмов. Программа должна выводить размер
# # популяции в каждый день, начиная с 1 и заканчивая n днем.
#
# m = int(input())
# p = int(input())
# n = int(input())
# for i in range(n):
#     print(i + 1, m * (1 + p / 100) ** i)

# Напишем программу, которая выводит те числа из промежутка 100 - 999, которые оканчиваются на 7.

# for i in range(100, 1000):
#     if i % 10 == 7:
#         print(i)

# Напишем программу, которая выводит все четные числа из промежутка 56 - 170

# for i in range(56, 171, 2):
#     print(i)

# # Отрицательный шаг генерации
#
# for i in range(5, 0, -1):
#     print(i, end=' ')
# print('Взлетаем!!!')

# stepik 7.2 - 7/11

# m = int(input())
# n = int(input())
# for i in range(m, n + 1):
#     print(i)

# stepik 7.2 - 8/11
# Даны два целых числа m и n. Напишите программу, которая выводит все целые числа от m до n включительно
# в порядке возрастания, если m<n, или в порядке убывания в противном случае.

# m = int(input())
# n = int(input())
# if m <= n:
#     for i in range(m, n + 1):
#         print(i)
# elif m >= n:
#     for i in range(m, n - 1, -1):
#         print(i)

# # stepik 7.2 - 9/11
# # Даны два целых числа m и n (m>n). Напишите программу, которая выводит все нечетные целые числа
# # от m до n включительно в порядке убывания.
#
# m = int(input())
# n = int(input())
# for i in range(m, n - 1, -1):
#     if i % 2 != 0:
#         print(i)

# # stepik 7.2 - 10/11
# Даны два натуральных числа m и n (m≤n). Напишите программу, которая выводит все целые числа
# от m до n включительно, удовлетворяющие хотя бы одному из условий:
#  - число кратно 17;
#  - число оканчивается на 9;
#  - число кратно 3 и 5 одновременно.

# m = int(input())
# n = int(input())
# for i in range(m, n + 1):
#     if (i % 17 == 0 and i % 17 == 0) or (i % 10 == 9 and i % 10 == 9) or (i % 3 == 0 and i % 5 == 0):
#         print(i)

# stepik 7.2 - 11/11
# Дано натуральное число n. Напишите программу, которая выводит таблицу умножения на n (от 1 до 10 включительно).

# n = int(input())
# for i in range(1, 11):
#     print(n, "x", i, "=", n * i)

########### ПОДСЧЕТ КОЛИЧЕСТВА #################

# Напишем программу, которая считывает 10 чисел и определяет, сколько из них больше 10

# counter = 0
# for _ in range(10):
#     num = int(input())
#     if num > 10:
#         counter = counter + 1
# print('Было введено', counter, 'чисел, больших 10.')

# Часто при написании программ требуется использовать несколько счетчиков. Модифицируем предыдущую программу:
# посчитаем еще и количество нулей среди введенных чисел

# counter1 = 0
# counter2 = 0
# for i in range(10):
#     num = int(input())
#     if num > 10:
#         counter1 = counter1 + 1
#     if num == 0:
#         counter2 = counter2 + 1
# print('Было введено', counter1, 'чисел, больших 10.')
# print('Было введено', counter2, 'чисел, равных 0.')

# Подсчитать количество чисел из диапазона [1;100], квадрат которых оканчивается на 4.

# counter = 0
# for i in range(1, 101):
#     if i**2 % 10 == 4:
#         print(i)
#         counter = counter + 1
#
# print("Кол-во:", counter)

############## ВЫЧИСЛЕНИЕ СУММЫ И ПРОИЗВЕДЕНИЯ ##################

# # Напишем программу, которая считывает 10 чисел и определяет сумму тех из них, которые больше 10.
#
# score = 0
# for i in range(10):
#     num = int(input())
#     if num > 10:
#         score = score + num
# print("Сумма чисел больше 10 равна:", score)

# напишем программу, которая запрашивает 10 целых чисел и находит их среднее значение:

# srednee = 0
# for i in range(10):
#     num = int(input())
#     srednee = srednee + num
# print("Среднее число:", srednee / 10)

# ПОМЕНЯТЬ МЕСТАМИ ЗНАЧЕНИЯ :

# y = 5
# x = 3
# x, y = y, x
# print("x =", x, "y = ", y)

# СИГНАЛЬНЫЕ МЕТКИ

# Напишем программу, определяющую, что натуральное число является простым:

# num = int(input())
# flag = True
# for i in range(2, num):
#     # print(i)
#     if num % i == 0:
#         print(i)
#         flag = False
# if num == 1:
#     print('Это единица, она не простая и не составная')
# elif flag == True:
#     print('Число простое')
# else:
#     print('Число составное')

# МАКСИМУМ И МИНИМУМ

# Напишем программу, которая считывает 10 положительных чисел и находит среди них наибольшее число

# largest = 0
# for i in range(10):
#     num = int(input())
#     if num > largest:
#         largest = num
# print("Наибольшее число:", largest)

# Напишем программу, которая считывает 10 чисел (необязательно положительных) и находит среди них наибольшее
# largest = int(input())
# for i in range(9):
#     num = int(input())
#     if num > largest:
#         largest = num
# print("Наибольшее число:", largest)

# АНАЛОГИЧНЫЕ(ВЗАИМОЗАМЕНЯЕМЫЕ) ВЫРАЖЕНИЯ

# total = total + num
# total += num

# Аналогичным образом можно менять местами значения трех и более переменных.
# a, b, c, d = b, c, d, a

# total = 0
# for i in range(1, 6):
#     total += i
# print(total)

# На вход программе подаются два целых числа a и b (a≤b). Напишите программу, которая подсчитывает
# количество чисел в диапазоне от a до b (включительно), куб которых оканчивается на 4 или 9.

# a = int(input())
# b = int(input())
# counter = 0
# for i in range(a, b + 1):
#     if (i ** 3) % 10 == 4 or (i ** 3) % 10 == 9:
#         counter += 1
# print(counter)

# На вход программе подается натуральное число n, а затем n целых чисел, каждое на отдельной строке.
# Напишите программу, которая подсчитывает сумму введенных чисел (не включая само число n).

# n = int(input())
# counter = 0
# for i in range(n):
#     chislo = int(input())
#     counter += chislo
# print(counter)

# from math import log
# n = int(input())
# b = 0
# for i in range(2, n + 1):
#     b += 1 / i
# print((1 + b) - log(n))

# На вход программе подается натуральное число n. Напишите программу, которая подсчитывает сумму
# тех чисел от 1 до n (включительно), квадрат которых оканчивается на 2,5 или 8

# counter = 0
# n = int(input())
# for i in range(1, n + 1):
#     if (i ** 2) % 10 == 2 or (i ** 2) % 10 == 5 or (i ** 2) % 10 == 8:
#         counter += i
# print(counter)

# На вход программе подается натуральное число n. Напишите программу, которая вычисляет n!
# n! = 1 * 2 * 3 * ... * n

# counter = 1
# n = int(input())
# for i in range(1, n + 1):
#     counter *= i
# print(counter)

# Напишите программу, которая считывает 10 чисел и выводит произведение отличных от нуля чисел.
# Гарантируется, что хотя бы одно из 10 чисел является ненулевым.
# Примечание 2. Отличные от нуля числа – те числа, которые не равны нулю.

# counter = 1
# for i in range(1, 11):
#     n = int(input())
#     if n != 0:
#         counter *= n
# print(counter)

# На вход программе подается натуральное число n. Напишите программу, которая вычисляет сумму всех его делителей.
#
# counter = 0
# n = int(input())
# for i in range(1, n + 1):
#     if n % i == 0:
#         counter += i
# print(counter)

# На вход программе подается натуральное число n. Напишите программу вычисления знакочередующей суммы
# 1 - 2 + 3 - 4 + 5 - 6 ... + ((-1) ** n + 1) * n

# n = int(input())
# counter = 0
# for i in range(1, n + 1):
#     if i % 2 == 0:
#         counter -= i
#     else:
#         counter += i
# print(counter)

# На вход программе подается натуральное число n, а затем n различных натуральных чисел последовательности,
# каждое на отдельной строке. Напишите программу, которая выводит наибольшее и второе наибольшее
# число последовательности.

# stepik 7.3 - 13/16
# n = int(input())   # вводится число членов дальнейшей последовательности
# largest = 0   # n идёт в начале всей последовательности и до введения следующих является наибольшим
# previous_largest = 0   # предыдущее не вводилось, примем за 0 до переприсвоения
#
# for _ in range(n):   # начинаем цикл записи остальных чисел, их сравнивания и переприсвоения
#     num = int(input())
#     if num > largest:    # если введённое число больше largest (самое первое largest = n)
#         previous_largest = largest    # прошлое самое большое становится предыдущим наибольшим
#         largest = num   # а данное введённое становится наибольшим пока не введут следующие
#         print(previous_largest, largest)
#     elif previous_largest < num < largest:
#         previous_largest = num
#         print(previous_largest, largest)
#     elif largest > num < previous_largest:
#         largest = largest
#         previous_largest = previous_largest
# print(largest)
# print(previous_largest)

# Напишите программу, которая считывает последовательность из 10 целых чисел и определяет, является ли каждое из них четным или нет

# counter = 0
# for i in range(1, 10 + 1):
#     num = int(input())
#     if num % 2 == 0:
#         counter = counter + 1
#     elif num % 2 != 0:
#         counter = counter
# if counter == 10:
#     print("YES")
# else:
#     print("NO")

# Напишите программу, которая считывает натуральное число n и выводит первые n чисел последовательности Фибоначчи.

# n = int(input())
# fib1 = 1
# fib2 = 1
# for i in range(n):
#     print(fib1, end=" ")
#     fib1, fib2 = fib2, fib1 + fib2

################## ЦИКЛ WHILE ####################

# Вывести числа от 1 до 100 с помощью ЦИКЛОВ FOR и WHILE


# for i in range(101):
#     print(i)

# i = 0
# while i < 101:
#     print(i)
#     i = i + 1

# Напишем программу, выводящую все числа, кратные 3, используя цикл for и while:

# for i in range(0, 100, 3):
#     print(i)

# n = 0
# while n < 101:
#     print(n)
#     n = n + 3

# напишем программу, которая считывает числа и находит их сумму до тех пор, пока пользователь не введет слово stop:

# text = input()
# total = 0
# while text != 'stop':
#     total += int(text)
#     text = input()
# print('Сумма чисел равна', total)

# На вход программе подается последовательность слов, каждое слово на отдельной строке. Концом
# последовательности является слово «КОНЕЦ» (без кавычек). При этом само слово «КОНЕЦ» не
# входит в последовательность, лишь символизируя её окончание. Напишите программу,
# которая выводит члены данной последовательности.

# word = input()
# total = 0
# while word != "КОНЕЦ":
#     print(word)
#     word = input()

# На вход программе подается последовательность слов, каждое слово на отдельной строке.
# Концом последовательности является слово «КОНЕЦ» или «конец» (большими или маленькими буквами,
# без кавычек). При этом сами слова «КОНЕЦ» и «конец» не входят в последовательность,
# лишь символизируя её окончание. Напишите программу, которая выводит члены данной последовательности.

# word = input()
# total = 0
# while word != "КОНЕЦ" and word != "конец":
#     print(word)
#     word = input()

# На вход программе подается последовательность слов, каждое слово на отдельной строке. Концом
# последовательности является одно из трех слов: «стоп», «хватит», «достаточно» (маленькими буквами,
# без кавычек). Сами эти слова в последовательность не входят, лишь символизируя её окончание.
# Напишите программу, которая выводит общее количество членов данной последовательности.

# word = input()
# total = 0
# while word != "стоп" and word != "хватит" and word != "достаточно":
#     total = total + 1
#     word = input()
# print(total)

# На вход программе подается последовательность целых чисел делящихся на 7, каждое число на
# отдельной строке. Концом последовательности является любое число, не делящееся на 7
# (само это число в последовательность не входит, лишь символизируя её конец).
# Напишите программу, которая выводит члены данной последовательности.

# num = int(input())
# while num % 7 == 0:
#     print(num)
#     num = int(input())

# На вход программе подается последовательность целых чисел, каждое число на отдельной строке.
# Признаком окончания последовательности является любое отрицательное число, при этом в саму
# последовательность оно не входит. Напишите программу, которая выводит сумму всех членов
# данной последовательности.

# num = int(input())
# total = 0
# while num >= 0:
#     total = total + num
#     num = int(input())
# print(total)

# На вход программе подается последовательность целых чисел от 1 до 5, характеризующее оценку
# ученика, каждое число на отдельной строке. Концом последовательности является любое
# неположительное число либо число, большее 5. Напишите программу, которая выводит количество пятерок.

# score = int(input())
# five = 0
# while score <= 5 and score > 0:
#     if  score == 5:
#         five = five + 1
#     score = int(input())
# print(five)

# Всем известно, что ведьмак способен одолеть любых чудовищ, однако его услуги обойдутся недешево.
# К тому же ведьмак не принимает купюры, он принимает только чеканные монеты. В мире ведьмака
# существуют монеты с номиналами 1,5,10,25.
# Напишите программу, которая определяет, какое минимальное количество чеканных монет нужно заплатить ведьмаку.

# ysluga = int(input())
# coins = 0
# while ysluga >= 25:
#     ysluga = ysluga - 25
#     coins = coins + 1
# while ysluga >= 10:
#     ysluga = ysluga - 10
#     coins = coins + 1
# while ysluga >= 5:
#     ysluga = ysluga - 5
#     coins = coins + 1
# while ysluga < 5 and ysluga != 0:
#     ysluga = ysluga - 1
#     coins = coins + 1
# print(coins)

################################# 7.5 / ОБРАБОТКА ЦИФР ЧИСЛА ########################

# Напишем программу, которая считывает натуральное число (целое положительное) и обрабатывает его цифры.

# n = int(input())
# while n != 0:           # пока в числе есть цифры
#     last_num = n % 10   # получить последнюю цифру
#     n = n // 10         # удалить последнюю цифру из числа
#     print(last_num)

# Напишем программу, которая определяет есть ли в числе цифра 7.

# num = int(input())
# seven = False
# while num != 0:
#     last_num = num % 10
#     if last_num == 7:
#         seven = True
#     num = num // 10
# if seven == True:
#     print("Есть 7")
# else:
#     print("Нет 7")

# # Дано натуральное число. Напишите программу, которая выводит его цифры в столбик в обратном порядке.
#
# num = int(input())
# while num != 0:
#     last_num = num % 10
#     num = num // 10
#     print(last_num)

# # Дано натуральное число. Напишите программу, которая меняет порядок цифр числа на обратный.
#
# num = int(input())
# while num != 0:
#     last_num = num % 10
#     num = num // 10
#     print(last_num, end="")

# # Дано натуральное число n,(n≥10). Напишите программу, которая определяет его максимальную и минимальную цифры.
#
# num = int(input())
# max_num = 0
# min_num = 10
# while num != 0:
#     last_num = num % 10
#     if last_num > max_num:
#         max_num = last_num
#     if last_num < min_num:
#         min_num = last_num
#     num = num // 10
# print("Максимальная цифра равна", max_num)
# print("Минимальная цифра равна", min_num)

# Дано натуральное число. Напишите программу, которая вычисляет:
#  сумму его цифр;
#  количество цифр в нем;
#  произведение его цифр;
#  среднее арифметическое его цифр;
#  его первую цифру;
#  сумму его первой и последней цифры.

# num = int(input())
# summa = 0
# total = 0
# ymnojenie = 1
# first_num = 0
# last_num = num % 10
# while num != 0:
#     last = num % 10   # узнает каждый цикл последнюю цифру
#     summa = summa + last
#     total = total + 1
#     ymnojenie = ymnojenie * last
#     first_num = last
#     num = num // 10    # Удаляет каждый раз последнюю цифру
# print(summa, total, ymnojenie, (summa / total), first_num, (first_num + last_num), sep="\n")

# Дано натуральное число n(n>9). Напишите программу, которая определяет его вторую (с начала) цифру.

# num = int(input())
# while num > 99:
#     last = num % 10
#     num = num // 10
# print(num % 10)

# Дано натуральное число. Напишите программу, которая определяет, состоит ли указанное число из одинаковых цифр.

# Намудрил через костыли
# num = int(input())
# poslednee = num % 10
# predposlednee = num // 10 % 10
# if num // 10 == 0:
#     print("YES")
# else:
#     while predposlednee == poslednee and num != 0:
#         last = num % 10
#         predposlednee = last
#         num = num // 10
#     if predposlednee == poslednee:
#         print("YES")
#     else:
#         print("NO")

# Дано натуральное число. Напишите программу, которая определяет, является ли последовательность
# его цифр при просмотре справа налево упорядоченной по неубыванию.
#
# num = int(input())
# poslednee = 0
# predposlednee = 0
# while predposlednee >= poslednee and num != predposlednee:
#      poslednee = num % 10   # получаем последнее цифру
#      predposlednee = num // 10 % 10
#      num = num // 10   # удаляем последнюю цифру
# if predposlednee >= poslednee:
#     print("YES")
# else:
#     print("NO")

################### stepik - 7.6 // break, continue, else ########################

# Усовершенствуем с помощью оператора break программу, проверяющую число на простоту (число которое делится на 1 и на себя):

# num = int(input())
# flag = True
# for i in range(2, num):
#     if num % i == 0:        #  если исходное число делится на какое-либо отличное от 1 и самого себя
#         print(i)
#         flag = False
#         break               # останавливаем цикл если встретили делитель числа
# if flag:                    # эквивалентно if flag == True:
#     print('Число простое')
# else:
#     print('Число составное')

# Напишем программу, использующую цикл for, которая считывает 10 чисел и суммирует их до тех пор,
# пока не обнаружит отрицательное число. В этом случае выполнение цикла прерывается командой break

# summa = 0
# for i in range(10):
#     num = int(input())
#     if num <= 0:
#         break
#     summa += num
#     print(summa)

# Оператор прерывания цикла break удобен в связке с сигнальными метками: когда после проверки некоторого условия нам нет смысла продолжать выполнение цикла.
# Напишем программу, которая определяет, содержит ли введенное пользователем число цифру 7.

# num = int(input())
# seven = False
# while num != 0:
#     last = num % 10
#     if last == 7:
#         seven = True
#         break
#     num = num // 10
# if seven:
#     print("YES")
# else:
#     print("NO")

# Напишем программу, которая выводит все числа от 1 до 100, кроме чисел 7, 17, 29 и 78.
#
# for i in range(1, 101):
#     if i == 7 or i == 17 or i == 29 or i == 78:
#         continue  # переходим на следующую итерацию
#     print(i)

# for i in range(10):
#     print(i, end='*')
#     if i > 6:
#         break

# На вход программе подается число n>1. Напишите программу, которая выводит его наименьший
# отличный от 1 делитель.

# n = int(input())
# for i in range(1, n+1):
#     if i == 1:
#         continue
#     if n % i == 0:
#         break
# print(i)

# На вход программе подается натуральное число n. Напишите программу, которая выводит числа от 1 до n
# включительно за исключением:
#  - чисел от 5 до 9 включительно;
#  - чисел от 17 до 37 включительно;
#  - чисел от 78 до 87 включительно.
#
# n = int(input())
# for i in range(1, n+1):
#     if 5 <= i <= 9 or 17 <= i <= 37 or 78 <= i <= 87:
#         continue
#     print(i)

#
# num = int(input())
# n = num
# while n != 0:
#     last = n % 10
#     if last == 7:
#         print('Число', num, 'содержит цифру 7')
#         break
#     n //= 10
# else:
#     print('Число', num, 'не содержит цифру 7')

##################### 7.7 - stepik // РЕВЬЮ КОДА #######################

# Рассмотрим задачу, которая проверяет число на простоту.

# num = int(input())
# flag = True
#
# for i in range(2, num):
#     if num % i == 0:
#         flag = False
# if num > 1 and flag == True:
#     print('Число простое')
# else:
#     print('Число составное')

# Оптимизируем код, чтоб он быстрее выполнялся в случае очень большого числа
# Достаточно проверить числа от 2 до num // 2 + 1:
# Любое число X (предположим, 10) невозможно разделить на число, большее чем половина X
# (например, 10 точно не делится нацело на 6, 7, 8, 9)
# num // 2 выдаст нам половину числа num без дробной части. Прибавляем единицу для того,
# чтобы цикл for прокрутил все числа, включая половину числа num (как мы помним,
# конечная граница диапазона у цикла рассматривается как "не включительно").
#
# num = int(input())
# flag = True
#
# for i in range(2, num // 2 + 1):
#     if num % i == 0:
#         flag = False
# if num > 1 and flag == True:
#     print('Число простое')
# else:
#     print('Число составное')

# Правую границу num // 2 + 1 проверки можно улучшить, если заметить, что у любого составного
# числа есть делитель (отличный от 1), не превосходящий квадратного корня из числа. Таким образом,
# имеет смысл перебирать делители от 2 до (корень из (num + 1))

# num = int(input())
# flag = True
#
# for i in range(2, int(num ** 0.5) + 1):
#     if num % i == 0:
#         flag = False
# if num > 1 and flag == True:
#     print('Число простое')
# else:
#     print('Число составное')

# Предыдущие оптимизации касались случая, когда проверяемое число является простым (делилось на 1 и самого себя)
# В случае если число является составным и мы нашли его первый делитель (отличный от 1),
# мы прерываем цикл с помощью оператора break:

# num = int(input())
# flag = True
#
# for i in range(2, int(num ** 0.5) + 1):
#     if num % i == 0:
#         flag = False
#         break
# if num > 1 and flag == True:
#     print('Число простое')
# else:
#     print('Число составное')

# На обработку поступает последовательность из 10 целых чисел (каждое на отдельной строке).
# Нужно написать программу, которая выводит на экран количество неотрицательных чисел последовательности и их произведение.
# Если неотрицательных чисел нет, требуется вывести на экран «NO». Программист торопился и написал программу неправильно.
#
# Было:

# count = 0
# p = 0
# for i in range(1, 10):
#     x = int(input())
#     if x > 0:
#         p = p * x
#         count = count + 1
# if count > 0:
#     print(x)
#     print(p)
# else:
#     print('NO')

# Стало:

# count = 0
# p = 1
# for i in range(1, 10 + 1):
#     x = int(input())
#     if x >= 0:
#         p = p * x
#         count += 1
# if count > 0:
#     print(count)
#     print(p)
# else:
#     print('NO')

# На обработку поступает последовательность из 10 целых чисел (каждое на отдельной строке).
# Известно, что вводимые числа по абсолютной величине не превышают 10 ** 8. Нужно написать программу, которая выводит на экран сумму всех отрицательных чисел последовательности и максимальное отрицательное число в последовательности. Если отрицательных чисел нет, требуется вывести на экран «NO». Программист торопился и написал программу неправильно.

# Было:
#
# mx = 0
# s = 0
# for i in range(11):
#     x = int(input())
#     if x < 0:
#         s = x
#     if x > mx:
#         mx = x
# print(s)
# print(mx)
#
# # Стало:
#
# mx = -10 ** 6
# s = 0
# for i in range(1, 11):
#     x = int(input())
#     if x < 0:
#         s += x
#         if x > mx:
#             mx = x
# if s == 0:
#     print("NO")
# else:
#     print(s)
#     print(mx)
#
# num = int(num)

# На обработку поступает последовательность из 7 целых чисел (каждое на отдельной строке). Нужно написать
# программу, которая подсчитывает и выводит сумму всех чётных чисел последовательности или , если чётных чисел в последовательности нет. Программист торопился и написал программу неправильно.

# s = 0
# for i in range(1, 7+1):
#     n = int(input())
#     if n % 2 == 0:
#         s = s + n
# print(s)

# На обработку поступает натуральное число. Нужно написать программу, которая выводит на экран максимальную
# цифру числа, кратную 3. Если в числе нет цифр, кратных 3, требуется на экран вывести «NO». Программист торопился и написал программу неправильно.

# n = int(input())
# max_digit = -1
# while n != 0:
#     digit = n % 10
#     if digit % 3 == 0:
#         if digit >= max_digit:
#             max_digit = digit
#     n = n // 10
# if max_digit == -1:
#     print('NO')
# else:
#     print(max_digit)

# На обработку поступает натуральное число. Нужно написать программу, которая выводит на экран
# его первую (старшую) цифру. Программист торопился и написал программу неправильно.
#
# n = int(input())
# while n != 0:
#     last = n % 10
#     n = n // 10
# print(last)

# На обработку поступает натуральное число. Нужно написать программу, которая выводит на экран произведение
# цифр введенного числа. Программист торопился и написал программу неправильно.
#
# n = int(input())
# product = 1
# while n != 0:
#     digit = n % 10
#     product = product * digit
#     n //= 10
# print(product)

############################## 7.8 - stepik // ВЛОЖЕННЫЕ ЦИКЛЫ ###################################

# ЧАСЫ
# for hours in range(24):
#     for minutes in range(60):
#         for seconds in range(60):
#             print(hours, ':', minutes, ':', seconds)

#
# for i in range(3):
#     for j in range(3):
#         if i == j:
#             break
#         print(i, j)

# for q in range(8):
#     for i in range(6):
#         print ( '*', end='')
#     print()

# for i in range(8):
#     for l in range(i + 1):
#         print("*", end="")
#     print()

# for i in range(1, 4):
#     for j in range(3, 5):
#         print(i + j, end='')

# counter = 0
# for i in range(99, 102):
#     temp = i
#     while temp > 0:
#         counter += 1
#         temp //= 10
# print(counter)

# Дано натуральное число n (n <= 9). Напишите программу, которая печатает таблицу размером
# n x 3, состоящую из данного числа (числа отделены одним пробелом).

# n = int(input())
# for q in range(n):
#     for i in range(3):
#         print(n, end=" ")
#     print()

# Дано натуральное число n (n <= 9). Напишите программу, которая печатает таблицу размером
# # n x 5, где в i-ой строке указано число i (числа отделены одним пробелом).

# n = int(input())
# for i in range(1, n + 1):
#     for q in range(5):
#         print(i, end=" ")
#     print()

# Дано натуральное число n (n <= 9). Напишите программу, которая печатает таблицу сложения для всех чисел от 1 до n (включительно) в соответствии с примером.

# n = int(input())
# for i in range(1, n + 1):
#     for q in range(1, 10):
#         print(i, "+", q, "=", i + q)
#     print()

# Дано нечетное натуральное число n. Напишите программу, которая печатает равнобедренный звездный треугольник с основанием, равным n в соответствии с примером:

# n = int(input())
# counter = 0   # Счетчик, который дойдет до половины от числа "n" + 1 и будет нужен во 2 цикле
# for i in range(1, ((n + 1) // 2) + 1):   # Цикл от 1 до половины числа "n" + 1 и еще +1 чтоб включительно
#     counter += 1
#     print("*" * i)
# for q in range((counter - 1), 0, -1):    # Цикл от от половины (числа "n" + 1) - 1 до 0
#     print("*" * q)

# Дано натуральное число n. Напишите программу, которая печатает численный треугольник в соответствии с примером:
#
# n = int(input())
# for i in range(1, n + 1):
#     print(str(i) * i)

############### 7.8 - stepik // ИСПОЛЬЗОВАНИЕ ВЛОЖЕННЫХ ЦИКЛОВ В УРАВНЕНИЯХ ################

# Найдите все пары натуральных чисел (и их количество), являющихся решением уравнения 12x+13y=777.

# for x in range(1, 65):
#     for y in range(1, 60):
#         if 12 * x + 13 * y == 777:
#             print("x =", x, "y =", y)

# Найдите все пары натуральных чисел (и их количество), являющихся решением уравнения
# (x**2) + (y**2) + (x**2) = 2020
# Корень из 2020 = 45

# for x in range(1, 46):
#     for y in range(1, 46):
#         for z in range(1, 46):
#             if (x ** 2) + (y ** 2) + (z ** 2) == 2020:
#                 print("x =", x, "y =", y, "z =", z)

# Решите уравнение в натуральных числах 28n+30k+31m=365.
#
# for n in range(1, 13):
#     for k in range(1, 12):
#         for m in range(1, 11):
#             if 28 * n + 30 * k + 31 * m == 365:
#                 print("n =", n, "k =", k, "m =", m)

# Имеется 100 рублей. Сколько быков, коров и телят можно купить на все эти деньги, если плата
# за быка – 10 рублей, за корову – 5 рублей, за теленка – 0.5 рубля и надо купить 100 голов скота?

# for n in range(1, 11):
#     for k in range(1, 21):
#         for m in range(1, 201):
#             if 10 * n + 5 * k + 0.5 * m == 100 and n + k + m == 100:
#                 print("n =", n, "k =", k, "m =", m)

# В 1769 году Леонард Эйлер сформулировал обобщенную версию Великой теоремы Ферма, предполагая,
# что по крайней мере n энных степеней необходимо для получения суммы, которая сама является энной
# степенью для n>2. Напишите программу для опровержения гипотезы Эйлера (продержавшейся до 1967 года)
# и найдите четыре положительных целых числа, сумма 5-х степеней которых равна 5-й степени другого положительного целого числа.
# Таким образом, найдите пять натуральных чисел a,b,c,d,e, удовлетворяющих условию:
# (a**5) + (b**5) + (c**5) + (d**5) = (e**5)
# В ответе укажите сумму a+b+c+d+e.

# for a in range(1, 4):
#     for b in range(1, 4):
#         for c in range(1, 4):
#             for d in range(1, 4):
#                 for e in range(1, 4):
#                     if (a ** 5) + (b ** 5) + (c ** 5) + (d ** 5) == (e ** 5):
#                         print("n =", n, "k =", k, "m =", m)


# Дано натуральное число n. Напишите программу, которая печатает численный треугольник с высотой
# равной n, в соответствии с примером:
# 1
# 2 3
# 4 5 6
# 7 8 9 10
# 11 12 13 14 15
# 16 17 18 19 20 21

# n = int(input()) 7
# total = 0
# for i in range(n):
#     for q in range(i + 1):
#         total = total + 1
#         print(total, end=" ")
#     print()

# Дано натуральное число n. Напишите программу, которая печатает численный треугольник с высотой равной n, в соответствии с примером:
# 1
# 121
# 12321
# 1234321
# 123454321
# ...

# num = int(input())
# for visota in range(1, num + 1):
#     for dlina in range(1, visota):   # доходим в цикле до среднего(до числа visot`ы)
#         print(dlina, end="")
#     for dlina2 in range((visota), 0, -1):   # далее счет от среднего числа на убывание до 1
#         print(dlina2, end="")
#     print()

# На вход программе подается два натуральных числа a и b(a < b). Напишите программу, которая находит
# натуральное число из отрезка [a;b] с максимальной суммой делителей и сумму его делителей. Если таких чисел несколько, то выведите наибольшее из них.

# a = int(input()) # 49
# b = int(input()) # 56
# count_delitel = 0
# summa_delitel = 0
# for ia in range(b, a + 1, -1):
#     for ib in range(ia, 0, -1):
#         if ia % ib != 0:
#             continue
#         if ia % ib == 0:
#             count_delitel += 1
#             summa_delitel += ib
# print(summa_delitel)

# На вход программе подается натуральное число n. Напишите программу, выводящую графическое
# изображение делимости чисел от 1 до n включительно. В каждой строке надо напечатать очередное
# число и столько символов «+», сколько делителей у этого числа.

# n = int(input()) # 5
# plus = 0
# for visota in range(1, n + 1): # 1
#     for i in range(1, visota + 1): # 1
#         if visota % i == 0:
#             plus += 1
#     print(str(visota) + "+" * plus)
#     plus = 0

# 3 step // 7.9

# a, b = int(input()), int(input())
# total = 0
# max_total = 0
# x = 0
# for i in range(a, b + 1):
#     for k in range(1, i + 1):
#         if i % k == 0:
#             total += k
#     if total >= max_total:
#         max_total = total
#         x = i
#     total = 0
# print(x, max_total)

# _______-------________--------________---------_________----------_________----------________
###############################################################################################
###############################################################################################

# s = "abcde"
# for i in range(len(s)):

# text = input()
# text = text.lower()
# h = "хорош"
# if h in text or h.capitalize() in text or h.swapcase() in text or h.title() in text or h.upper() in text or h.lower() in text:
#    print("YES")
# else:
#    print("NO")

# нижний регистр

# s = input()
# count = 0
# for i in range(len(s)):
#  if s[i] == s[i].lower():
#    count += 1
# print(count)

################################ Поиск и замена ###################################
# s = "foo bar foo baz foo qux"
# print(s.find("foo"))
# print(s.find("bar"))
# print(s.find("qu"))
# print(s.find("python"))

# 9.4 - 2

# 6

# true

# false

# 8

# s = input()
# print(s.count(" "))

# s = input()
# s = s.lower()
# print("Аденин:", s.count("а"))
# print("Гуанин:", s.count("г"))
# print("Цитозин:", s.count("ц"))
# print("Тимин:", s.count("т"))

# очень странные дела

# s = input()
# counter = s.count("11") // 3
# print(counter)

# количество цифр

# s = input()
# counter = 0
# for i in range(0, 10):
#  counter += s.count(str(i))
# print(counter)

# .com or .ru

# s = input()
# if s.endswith(".com") or s.endswith(".ru") == True:
#  print("YES")
# else:
#  print("NO")

# Самый частотный символ

# s = input()
# counter1 = s.count(s[0]) #2
# bykva = s[0]
# for i in range(1, len(s)):
#  count = s.count(s[i]) #b(4)
#  if count >= counter1:
#    counter1 = count
#    bykva = s[i]
# print(bykva)

# s = input()   # bznxFssnFz
# if s.count("f") == 0:
#  print("NO")
# if s.count("f") == 1:
#  print(s.find("f"))
# if s.count("f") > 1:
#  print(s.find("f"), s.rfind("f"))

# Удаление фрагмента

# s = input()
# print(s[:s.find("h")] + s[s.rfind("h") + 1:])

# Символы в диапазоне

# a = int(input())
# b = int(input())
# for i in range(a, b + 1):
#  print(chr(i), end=" ")

# Простой шифр

# s = input()   # hello world
# for i in range(len(s)):
#  print(ord(s[i]), end=" ")

# Шифр Цезаря [!!!]

# sdvig = int(input())
# cod = input()
# for i in range(len(cod)):
#  print(chr(ord(cod[i]) - sdvig), end="")

############ ЕКЗАМЕН STR ############

# Третья цифра

# s = input()
# print(s[2])

# Все вместе 2

# s = input()   #13386325602
# chet = 0
# summa5 = 0
# mnoj7 = 1
# count05 = 0
# print(s.count("3"))
# print(s.count(s[-1]))
# for i in range(len(s)):
#  if s[i] == "0" or s[i] == "2" or s[i] == "4" or s[i] == "6" or s[i] == "8":
#    chet += 1
# print(chet)
# for i in range(len(s)):
#  if int(s[i]) >= 5:
#    summa5 += int(s[i])
# print(summa5)
# for i in range(len(s)):
#  if int(s[i]) >= 7:
#    mnoj7 *= int(s[i])
# print(mnoj7)
# for i in range(len(s)):
#  if s[i] == "0" or s[i] == "5":
#    count05 += 1
# print(count05)

# s = "     python hello     "
# print(s.strip())

# s = "python hello"
# print(s.upper())

# s = "python hello"
# print(s.replace("o", "@")

# Каждый третий

# s = input()
# for i in range(len(s)):
#  if i % 3 != 0:
#    print(s[i], end="")

# Замени меня полностью

# s = input()
# print(s.replace("1", "one"))

# Удали меня полностью

# s = input()
# print(s.replace("@", ""))

# Второе вхождение

# s = input() #affectife
# summa_f2 = 0
# if s.count("f") == 0:
#  print("-2")
# if s.count("f") == 1:
#  print("-1")
# if s.count("f") >= 2:
#  print(s.find("f", s.find("f") + 1, len(s)))

# Переворот

# s = input()   # zxchuiophqq
# hh = (s[s.rfind("h") -1:s.find("h"):-1])
# print(s[:s.find("h") + 1] + hh + s[s.rfind("h"):])

################ СПИСОК LIST ###############

# n = [228, 1337, 1488, 322]
# print(n)
# print(n[0:2])

# n = list(range(228, 231))
# print(n)

# 11.1 - 4

# 4

# да

# Список чисел

# n = list(range(1, int(input()) + 1))
# print(n)

# !!!!!!!!!!!!!!!!! Список букв

# n = int(input())
# nn = list(range(97, 97 + n))
# print(chr(str(nn)))

# evens = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]
# average = sum(evens) // len(evens)
# print(average)

# raindow = ["Red", "Orange", "Yellow", "Green", "Blue", "Indigo", "Violet"]
# raindow[3] = "Зеленый"
# raindow[6] = "Фиолетовый"
# print(raindow)

# languages = ["a", "b", "c", "d", "e", "f", "g"]
# languages[0:] = [-1:0:-1]
# print(languages.reverse())

# numbers1 = [1, 2, 3]
# numbers2 = [6]
# numbers3 = [7, 8, 9, 10, 11, 12, 13]
# num = numbers1 * 2 + numbers2 * 9 + numbers3
# print(num)

########## ДОБАВЛЕНИЕ И УДАЛЕНИЕ ИЗ СПИСКА #############

# numbers = [2, 6, 3, 14, 10]
# print(len(numbers))
# print(numbers[-1])
# print(numbers[-1:0:-1])
# if 5 in numbers or 17 in numbers:
#   print("YES")
# else:
#   print("NO")
# print(del numbers[0] + del numbers[-1])

# Список строк

# n = int(input())
# spisok = []
# for i in range(n):
#  s = input()
#  spisok.append(s)
# print(spisok)

# Алфавит

# spisok = []
# engl = ["abcdefghijklmnopqrstuvwxyz"]
# for i in range(1, len(engl) + 1):
#  spisok.append(engl[i] * i)
# print(spisok)

# Список кубов

# n = int(input())
# spisok = []
# for i in range(n):
#  num = input() #! мб треба int()
#  spisok.append(num ** 3)
# print(spisok)

# Список делителей

# n = int(input()) #! мб без int()
# spisok = []
# #spisok.append(spisok.find())
# for i in range(1, n + 1):
#  if n % i == 0:
#    spisok.append(i)
# print(spisok)

# !!!!!!!!!!!!!!!!! Суммы двух

# n = int(input()) # мб без int
# spisok = []
# for i in range(n):
#  numbers = int(input())
#  spisok.append(numbers)
# last_spisok = [spisok[0]]
# for i in range(, len(spisok)):
#  last_spisok.append[dm]

# Удалите нечетные индексы

# n = int(input())
# list = []
# for i in range(len(n)):
#  num = int(input())
#  if num % 2 == 0:
#    list.append(num)
# print(list)

# k-ая буква слова

# n = int(input())
# words = input()
# spisok = []
# for i in range(n):
#  words = input()
#  spisok.append(words)
# k = int(input())
# spisok1 = []
# for i in range(n):
#  spisok1.append(spisok[i][k])
# for i in range(n):
#  print(spisok1[i], end="")

# n = int(input())
# spisok_str = []
# spisok_bykv = []
# for i in range(n):
#  words = input()
#  for l in range(len(words)):
#    spisok_bykv.append(words[l])
# print(spisok_bykv)

# numbers = [1, 78, 23, -65, 99, 9089, 34, -32, 0, -67, 1, 11, 111]
# count = 0
# for i in range(len(numbers)):

# sdvig = int(input())
# cod = input()
# for i in range(len(cod)):
#    if ord(cod[i]) - sdvig < ord("a"):
#        print(chr(ord("z") - (ord("a") - (ord(cod[i]) - sdvig + 1))), end="")
#    else:
#        print(chr(ord(cod[i]) - sdvig), end="")


# Повтор

# n = int(input())
# n = list(range(1, n + 1))
# print(n)

# список букв

# n = int(input())
# listt = []
# for i in range(ord("a"), n + ord("a")):
#  listt.append(chr(i))
# print(listt)

# evens = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]
# print(sum(evens) / len(evens))

# rainbow = ['Red', 'Orange', 'Yellow', 'Green', 'Blue', 'Indigo', 'Violet']
# rainbow[3] = "Зеленый"
# rainbow[-1] = "Фиолетовый"
# print(rainbow)

# Цифровой корень

# n = int(input())
# while n > 9:
#     n = (n % 10) + (n // 10)
# print(n)
# 1 + 9 + 2 = 12 = 1 + 2 = 3

# Сумма факториалов
#
# n = int(input())  # 3
# count = 1
# count1 = 0   # 1 +
# for l in range(1, n + 1):
#     for i in range(1, l + 1):
#         count *= i
#     count1 += count
#     count = 1
# print(count1)

# (1) + (1 * 2) + (1 * 2 * 3) = 1 + 2 + 6 == (9)

# Простые числа

# a = int(input())
# b = int(input())
# for i in range(a, b + 1):
#     count = 0
#     for l in range(1, i + 1):
#         if i % l == 0:
#             count += 1
#     if count == 2:
#         print(i)

# n = int(input())
# s = 0
# while n > 0:
#     last = n % 10
#     if last % 2 == 0:
#         s += last
#     n = n // 10
# print(s)

# n = int(input())
# s = 0
# while n != 0:
#     if n % 2 == 0:
#         s += n % 10
#     n //= 10
# print(s)

# n = 8
# count = 0
# maximum = -1000
# for i in range(1, n + 1):
#     x = int(input())
#     if x % 4 == 0:
#         count += 1
#         if x > maximum:
#             maximum = x
# if count > 0:
#     print(count)
#     print(maximum)
# else:
#     print('NO')

# n = int(input())
# print("*" * 19)
# for i in range(1, n - 1):
#     print("*" + (" " * 17) + "*")
# print("*" * 19)

# n = int(input())
# while n > 100:
#     last = n % 10
#     n //= 10
# print(last)

# for a in range (1, 33):
#   for b in range (1, 33):
#     for c in range (1, 33):
#       for d in range (1, 33):
#         if ((a ** 3 + b ** 3) == (c ** 3 + d ** 3)) and a != b and a != c and a != d and b != c and b != d and c != d:
#           print(a ** 3 + b ** 3)


###################### ПОВТОР СТРОК 9 №№№№№№№№№№№№№№№№№№№№№№№№№№№

# Очень странные дела

# s = int(input())
# count = 0
# for i in range(s):
#     n = input()
#     if n.count("11") >= 3:
#         count += 1
# print(count)

# Количество цифр

# n = input()
# count = 0
# for i in range(len(n)):
#     if n[i].isdigit() == True:
#         count += 1
# print(count)

# .com or .ru

# s = input()
# if s.endswith(".com") == True or s.endswith(".ru") == True:
#     print("YES")
# else:
#     print("NO")

# Самый частотный символ

# s = input()
# count1 = s.count(s[0])
# count2 = s[0]
# for i in range(1, len(s)):
#     if s.count(s[i]) >= count1:
#         count1 = s.count(s[i])
#         count2 = s[i]
# print(count2)

# Первое и последнее вхождение

# s = input()
# if s.count("f") == 1:
#     print(s.find("f"))
# if s.count("f") >= 2:
#     print(s.find("f"), end=" ")
#     print(s.rfind("f"))
# if s.count("f") == 0:
#     print("NO")

# Удаление фрагмента

# s = input()
# print(s.replace(s[s.find("h"):s.rfind("h") + 1], ""))

# Проверь никнейм

# nick = input()
# if nick[1:] == nick[1:].lower() and nick.startswith("@") and 15 >= len(nick) >= 5 and nick[1:].isalnum():
#     print("Correct")
# else:
#     print("Incorrect")

# Плохие комментарии

# n = int(input())
# for i in range(1, n + 1):
#     s = input()
#     if s.isspace() or s == "":
#         print(str(i) + ": COMMENT SHOULD BE DELETED")
#     else:
#         print(str(i) + ":", s)

# Автомобильный номер

# s = input()
# count = 0
# if 10 >= len(s) >= 7:
#     if s[0].isalpha() and s[0].isupper():
#         count += 1
#     if s[i] == s[1] or s[i] == s[2] or s[i] == s[3] and s[i].isdigit():
#         count += 1
#     if s[i] == s[4] or s[i] == s[5] and s[i].isalpha() and s[i].isupper():
#         count += 1
#     if s[i] == s[6] and s[i] == "_":
#         count += 1
#     if s[i] == s[7] or s[i] == s[8] and s[i].isdigit():
#         count += 1
#     elif
# if count >= 7:
#     print("YES")
# else:
#     print("NO")

# for i in range(len(s)):
#     if 10 >= len(s) >= 9
#         if s[i] == s[0] and s[i].isalpha() and s[i].isupper():
#             count += 1
#         if s[i] == s[1] or s[i] == s[2] or s[i] == s[3] and s[i].isdigit():
#             count += 3
#         if s[i] == s[4] or s[i] == s[5] and s[i].isalpha() and s[i].isupper():
#             count += 2
#         if s[i] == s[6] and s[i] == "_":
#             count += 1
#         if s[i] == s[7] or s[i] == s[8] and s[i].isdigit():
#             count += 2
#     elif 10 >= len(s) >= 9 and s[10] and s[10].isdigit():
#         count += 1
# if 10 >= count >= 9:
#     print("YES")
# else:
#     print("NO")


# Автомобильный номер V2.0

# nomer = input()
# b = "АВЕКМНОРСТУХ"
# if 9 <= len(nomer) <= 10 and nomer[0] in b and nomer[1:4].isdigit() and nomer[4] in b and nomer[5] in b and nomer[6] == "_" and nomer[7:10].isdigit():
#     print("YES")
# else:
#     print("NO")

# Курсы валют

# data = input()
# kyrs_d = input()
# kyrs_y = input()
# print(f"На {data}: 1$ = {kyrs_d}₽, 1¥ = {kyrs_y}₽")

# (Не) Активное похудение

# day = int(input())
# ves = float(input())
# cel = 100 - (float(day) * 0.2)
# # if (100 - ves) >= 0.2 * (60 - day):
# if ves <= cel:
#     print("Все идет по плану")
#     print(f"#{day} ДЕНЬ: ТЕКУЩИЙ ВЕС = {ves} кг, ЦЕЛЬ по ВЕСУ = {cel} кг")
# else:
#     print("Что-то пошло не так")
#     print(f"#{day} ДЕНЬ: ТЕКУЩИЙ ВЕС = {ves} кг, ЦЕЛЬ по ВЕСУ = {cel} кг")


################ CHR and ORD #################

# for i in range(26):
#     print(chr(ord('A') + i))

# Символы в диапазоне

# a = int(input())
# b = int(input())
# for i in range(a, b + 1):
#     print(chr(i), end=" ")

# Простой шифр

# s = input()
# for i in range(len(s)):
#     print(ord(s[i]), end=' ')

# Шифр Цезаря
#
# sdvig = int(input())
# cod = input()
# for i in range(len(cod)):
#     if ord(cod[i]) - sdvig < ord("a"):
#         print(chr(ord("z") - (ord("a") - (ord(cod[i]) - sdvig + 1))), end="")
#     else:
#         print(chr(ord(cod[i]) - sdvig), end="")

# Каждый третий

# s = input()
# for i in range(len(s)):
#     if i % 3 != 0:
#         print(s[i], end="")

# Замени меня полностью

# s = input()
# for i in range(len(s)):
#     if s[i] == "1":
#         print("one", end="")
#     else:
#         print(s[i], end="")

# Удали меня полностью

# s = input()
# print(s.replace("@", ''))

# Второе вхождение

# s = input() #affectife
# summa_f2 = 0
# if s.count("f") == 0:
#     print("-2")
# if s.count("f") == 1:
#     print("-1")
# if s.count("f") >= 2:
#     print(s.find("f", s.find("f") + 1, len(s)))

# Переворот

# s = input()
# hh = (s[s.rfind("h") -1:s.find("h"):-1])
# print(s[:s.find("h") + 1] + hh + s[s.rfind("h"):])

# numbers1 = [1, 2, 3]
# numbers2 = [6]
# numbers3 = [7, 8, 9, 10, 11, 12, 13]
#
# print((numbers1 * 2) + (numbers2 * 9) + (numbers3))

# Все сразу 1

# numbers = [2, 6, 3, 14, 10, 4, 11, 16, 12, 5, 4, 16, 1, 0, 8, 16, 10, 10, 8, 5, 1, 11, 10, 10, 12, 0, 0, 6, 14, 8, 2, 12, 14, 5, 6, 12, 1, 2, 10, 14, 9, 1, 15, 1, 2, 14, 16, 6, 7, 5]
# print(len(numbers))
# print(numbers[-1])
# print(numbers[::-1])
# if 5 in numbers and 17 in numbers:
#     print("YES")
# else:
#     print("NO")
# print(numbers[1:-1])

# Список строк

# n = int(input())
# list = []
# for i in range(n):
#     s = input()
#     list.append(s)
# print(list)

# Алфавит

# alph = "abcdefghijklmnopqrstuvwxyz"
# list = []
# for i in range(0, 26):
#     list.append(alph[i] * (i + 1))
# print(list)

# Список кубов

# n = int(input())
# list = []
# for i in range(n):
#     s = int(input())
#     list.append(s ** 3)
# print(list)

# Список делителей

# n = int(input()) #! мб без int()
# spisok = []
# #spisok.append(spisok.find())
# for i in range(1, n + 1):
#  if n % i == 0:
#    spisok.append(i)
# print(spisok)

# !!!!!!!!!!!!!!!!! Суммы двух

# n = int(input())
# spisok = []
# last = int(input())
# for i in range(1, n):
#     s = int(input())
#     spisok.append(s + last)
#     last = s
# print(spisok)

# Удалите нечетные индексы

# n = int(input())
# list = []
# for i in range(n):
#     list.append(int(input()))
# del list[1::2]
# print(list)

# k-ая буква слова

# n = int(input())
# spisok = []
# for i in range(n):
#     spisok.append(input())
# k = int(input())
# spisok1 = []
# for i in range(n):
#     if len(spisok[i]) >= k:
#         print(spisok[i][k - 1], end="")

# Символы всех строк

# n = int(input())
# list = []
# for i in range(n):
#     list.extend(input())
# print(list)

# numbers = [1, 78, 23, -65, 99, 9089, 34, -32, 0, -67, 1, 11, 111]
# count = 0
# for i in range(len(numbers)):

# sdvig = int(input())
# cod = input()
# for i in range(len(cod)):
#    if ord(cod[i]) - sdvig < ord("a"):
#        print(chr(ord("z") - (ord("a") - (ord(cod[i]) - sdvig + 1))), end="")
#    else:
#        print(chr(ord(cod[i]) - sdvig), end="")


# Повтор

# n = int(input())
# n = list(range(1, n + 1))
# print(n)

# список букв

# n = int(input())
# listt = []
# for i in range(ord("a"), n + ord("a")):
#  listt.append(chr(i))
# print(listt)

# evens = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]
# print(sum(evens) / len(evens))

# rainbow = ['Red', 'Orange', 'Yellow', 'Green', 'Blue', 'Indigo', 'Violet']
# rainbow[3] = "Зеленый"
# rainbow[-1] = "Фиолетовый"
# print(rainbow)

# numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
# print(*numbers, sep='')

# numbers = [1, 78, 23, -65, 99, 9089, 34, -32, 0, -67, 1, 11, 111]
# summa = 0
# for i in range(len(numbers)):
#     summa += numbers[i] ** 2
# print(summa)

# Значение функции

# n = int(input())
# spisok = []
# spisok2 = []
# for i in range(n):
#     x = int(input())
#     spisok.append(x)
#     spisok2.append((x ** 2) + (2 * x) + 1)
# print(*spisok, sep='\n')
# print('')
# print(*spisok2, sep='\n')

# Remove outliers

# n = int(input())
# list = []
# for i in range(n):
#     list.append(int(input()))
# for l in range(len(list)):
#     if l != list.index(max(list)) and l != list.index(min(list)):
#         print(list[l])

# Без дубликатов

# n = int(input())
# list = []
# for i in range(n):
#     s = input()
#     if s not in list:
#         list.append(s)
# print(*list, sep="\n")

# Google search - 1

# n = int(input())
# list = []
# for i in range(n):
#     list.append(input())
# search = input().lower()
# for l in range(len(list)):
#     if search in list[l].lower():
#         print(list[l])

# Google search - 2

# n = int(input())
# list = []
# for i in range(n):
#     list.append(input())
# k = int(input())
# list_k = []
# for i in range(k):
#     list_k.append(input().lower())
# for i in range(len(list_k)):
#     for l in range(len(list)):
#         if list_k[i].lower() in list[l].lower():
#             count += 1

# Negatives, Zeros and Positives

# n = int(input())
# list = []
# for i in range(n):
#     list.append(int(input()))
# minus = []
# zero = []
# plus = []
# for i in range(n):
#     if list[i] < 0:
#         minus.append(list[i])
#     if list[i] == 0:
#         zero.append(list[i])
#     if list[i] > 0:
#         plus.append(list[i])
# print(*minus, sep='\n')
# print(*zero, sep='\n')
# print(*plus, sep='\n')

# Google search - 2

# n = int(input())
# list = []
# for i in range(n):
#     list.append(input().lower())
# k = int(input())
# search = []
# for i in range(k):
#     search.append(input().lower())
# for i in range(len(list)):
#     for l in range(len(search)):
#         if not search[l] in list[i]:
#             del list[i]
#             print(list)

# n = int(input())
# spisok = []
# for i in range(n):
#     spisok.append(input())
# k = int(input())
# search = []
# for i in range(k):
#     search.append(input())
# list = []
# count = 0
# for i in range(len(spisok)):
#     count = 0
#     for l in range(len(search)):
#         if search[l].lower() in spisok[i].lower():
#             count += 1
#     if count == len(search):
#         list.append(spisok[i])
# print(*list, sep='\n')

########################## методы SPLIT and JOIN ############################

# s = "5.46.7.8"
# w = s.split(".")
# print(w)
#
# words = ['Python', 'is', 'the', 'most', 'powerful', 'language']
# s = ' '.join(words)
# print(s)

# words = ['Python', 'is', 'the', 'most', 'powerful', 'language']
# s = '---'.join(words)
# print(s)

# s = 'BEEGEEK'
# chars = list(s)
# chars1 = s.split()
# print(chars)
# print(chars1)

# Построчный вывод

# name = input().split()
# for i in range(len(name)):
#     print(name[i][0], end='.')

# Windows OS

# s = input().split("\\")
# print(*s, sep='\n')

# Диаграмма

# s = input().split()
# for i in range(len(s)):
#     print(int(s[i]) * '+')

# Корректный ip-адрес

# s = input().split('.')
# count = 0
# for i in range(len(s)):
#     if int(s[i]) <= 255:
#         count += 1
# if count == 4:
#     print("ДА")
# else:
#     print("НЕТ")

# Добавь разделитель

# s = list(input())
# space = input()
# print(space.join(s))

# Количество совпадающих пар

# s = input().split()
# count = 0
# for i in range(len(s)):
#     for l in range(i + 1, len(s)):
#         if s[i] == s[l]:
#             count += 1
# print(count)

############################## Тема урока: методы списков #################################

# names = ['Gvido', 'Roman' , 'Timur']
# names.insert(1, "YASHA")
# print(names)

# names = ['Gvido', 'Roman' , 'Timur']
# position = names.index('Timur')
# print(position)

# food = ['Рис', 'Курица', 'Рыба', 'Брокколи', 'Рис']
# print(food)
# food.remove('Рис')
# print(food)

# names = ['Gvido', 'Roman', 'Timur']
# item = names.pop(1)
# print(item)
# print(names)

# names = ['Timur', 'Gvido', 'Roman', 'Timur', 'Anders', 'Timur']
# cnt1 = names.count('Timur')
# print(cnt1)
# print(names)

# names = ['Gvido', 'Roman' , 'Timur']
# names.reverse()
# print(names)

# names = ['Gvido', 'Roman' , 'Timur']
# names.clear()
# print(names)

# names = ['Gvido', 'Roman' , 'Timur']
# names_copy = names.copy()              # создаем поверхностную копию списка names
# print(names)
# print(names_copy)

# Все сразу 2

# numbers = [8, 9, 10, 11]
# numbers[1] = 17
# numbers.extend([4, 5, 6])
# numbers.remove(numbers[0])
# numbers = numbers * 2
# numbers.insert(3, 25)
# print(numbers)

# Переставить min и max

# n=[int(i) for i in input().split()]
# max=n.index(max(n))
# min=n.index(min(n))
# n[max],n[min] = n[min],n[max]
# print(' '.join(str(i) for i in n))

# Количество артиклей

# s = input().lower().split()
# print('Общее количество артиклей:', s.count("a") + s.count("an") + s.count("the"))

# Взлом Братства Стали 🌶️

# s = input()
# list = []
# for i in range(int(s[1:])):
#     cod = input()
#     if cod.count("#"):
#         list.append(cod[:cod.index("#")].rstrip())
#     else:
#         list.append(cod)
# print(*list, sep='\n')

######################## Метод sort() ########################

# В Python списки имеют встроенный метод sort(),
# который сортирует элементы списка по возрастанию или убыванию.

# a = [1, 7, -3, 9, 0, -67, 34, 12, 45, 1000, 6,  8, -2, 99]
# a.sort()
# print('Отсортированный список:', a)

# По умолчанию метод sort() сортирует список по возрастанию.
# Если требуется отсортировать список по убыванию, необходимо явно указать параметр reverse = True.

# a = [1, 7, -3, 9, 0, -67, 34, 12, 45, 1000, 6,  8, -2, 99]
# a.sort(reverse=True)  # сортируем по убыванию
# print('Отсортированный список:', a)

# a = ['sdfs', 'sdfsdfds', 'sdf', 'ssdfssssssss']
# a.sort()
# print('Отсортированный список:', a)

# Сортировка чисел

# s = [int(i) for i in input().split()]
# s.sort()
# print(*s)
# s.sort(reverse=True)
# print(*s)

############################## Списочные выражения ##############################

# numbers = [int(i) for i in input().split()]
# print(numbers)

# numbers = [i for i in range(10)]
# print(numbers)

# 1. Создать список, заполненный 10 нулями можно и при помощи списочного выражения:
#
# zeros = [0 for i in range(10)]
# 2. Создать список, заполненный квадратами целых чисел от 0 до 9 можно так:
#
# squares = [i ** 2 for i in range(10)]
# 3. Создать список, заполненный кубами целых чисел от 10 до 20 можно так:
#
# cubes = [i ** 3 for i in range(10, 21)]
# 4. Создать список, заполненный символами строки:
#
# chars = [c for c in 'abcdefg']
# print(chars)

# lines = [input() for _ in range(int(input()))]
# print(lines)


# если требуется создать список четных чисел от 0 до 20, то мы можем написать такой код:
# evens = [i for i in range(21) if i % 2 == 0]
# print(evens)
# а лучше:
# evens = [i for i in range(0, 21, 2)]
# print(evens)

# В списочном выражении можно использовать вложенные циклы.
#
# numbers = [i * j for i in range(1, 5) for j in range(2)]
# print(numbers)
#
# Такой код равнозначен следующему:
#
# numbers = []
# for i in range(1, 5):
#     for j in range(2):
#         numbers.append(i * j)
# print(numbers)

# keywords = ['False', 'True', 'None', 'and', 'with', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'try', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'while', 'yield']
# new_keywords = [i[1:] for i in keywords]
# print(new_keywords)

# keywords = ['False', 'True', 'None', 'and', 'with', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'try', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'while', 'yield']
# lengths = [len(i) for i in keywords]
# print(lengths)

# keywords = ['False', 'True', 'None', 'and', 'with', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'try', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'while', 'yield']
# new_keywords = [i for i in keywords if len(i) >= 5]
# print(new_keywords)

# palindromes = [i for i in range(100, 1001) if str(i) == str(i)[::-1]]
# print(palindromes)

# Списочное выражение

# n = [i ** 2 for i in range(1, int(input()) + 1)]
# print(*n, sep="\n")

# Списочное выражение 2

# n = [print(int(i) ** 3, end=" " ) for i in input().split()]

# В одну строку 1

# n = [print(i) for i in input().split()]

# В одну строку 2

# n = [print(i, end='') for i in input() if i.isdigit()]

# В одну строку 3

# print(*[int(i) ** 2 for i in input().split() if (int(i) ** 2) % 2 == 0 and (int(i) ** 2) % 10 != 4], end=' ')

################# 11.8 - Сортировка списков #################


####### BUBBLE SORT
# a = [1, 7, -3, 9, 0, -67, 34, 12, 45, 1000, 6,  8, -2, 99]    # 14
# n = len(a)
# for i in range(n - 1):
#     print('###', i, "цикл", a)
#     for j in range(n - 1 - i):
#         print('#', j)
#         if a[j] > a[j + 1]:                  # если порядок элементов пары неправильный
#             print('меняем элементы:', a[j], 'и', a[j + 1], 'будет:')
#             a[j], a[j + 1] = a[j + 1], a[j]  # меняем элементы пары местами
#             print(a)
# print('Отсортированный список:', a)

####### SELECTION SORT

# a = [1, 7, -3, 9, 0, -67, 34, 12, 45, 1000, 6,  8, -2, 99]
# n = len(a)
# while n > 0:
#     a[a.index(max(a[0:n]))], a[n - 1] = a[n - 1], a[a.index(max(a[0:n]))]
#     n -= 1
# print(a)

###### INSERTION SORT

# a = [1, 7, -3, 9, 0, -67, 34, 12, 45, 1000, 6,  8, -2, 99]
# n = len(a)
# print('Начинаем цикл перебора всех элементов списка, начиная со второго (неотсортированный список)')
# for i in range(1, n):
#     print(a, i, 'итерация: a[i] =', a[i])
#     elem = a[i]  # первый элемент из неотсортированной части списка
#     print('Запоминаем проверяемый элемент списка в доп память - elem = a[i] =', a[i])
#     j = i
#     if a[j - 1] <= elem:
#         print(f'В while не заходим, тк проверяемое число ({a[i]}) больше предыдущего ({a[i - 1]})')
#     while j >= 1 and a[j - 1] > elem:
#         print(f'while: сравниваем индекс = {j}: на место a[j] = {a[j]} записываем число {a[j - 1]}, и получаем', end=' ')
#         a[j] = a[j - 1]
#         print(a)
#         j -= 1
#     print(f'Извлекаем из доп памяти elem = {elem} в индекс {j}')
#     a[j] = elem
# print(a)

###################################### 12 ЕКЗАМЕН #########################################

# Список четных

# n = int(input())
# list = []
# for i in range(1, n + 1):
#     if i % 2 == 0:
#         list.append(i)
# print(list)

# list = []
# print([list.append(i) for i in range(1, int(input()) + 1) if i % 2 == 0])

# Сумма двух списков

# L = [int(i) for i in input().split()]
# M = [int(i) for i in input().split()]
# for i in range(len(L)):
#     print(L[i] + M[i], end=' ')

# Сумма чисел

# s = input().split()
# n = [int(s[i]) for i in range(len(s))]
# print('+'.join(s), "=", sum(n), sep='')

# Валидный номер 🌶️🌶️

# s = input().split("-")
# cnt = 0
# if (s[0] == "7" and len(s[0]) == 1 and len(s[1]) == 3 and len(s[2]) == 3 and len(s[3]) == 4) or (len(s[0]) == 3 and len(s[1]) == 3 and len(s[2]) == 4):
#     for i in range(len(s)):
#         for j in range(len(s[i])):
#             if s[i][j].isdigit():
#                 cnt += 1
#     if 11 >= cnt >= 10:
#         print("YES")
#     else:
#         print("NO")
# else:
#     print("NO")

# s = input().split("-")
# cnt = 0
# if s[0] == "7" and len(s[0]) == 1 and len(s[1]) == 3 and len(s[2]) == 3 and len(s[3]) == 4 and len(s) == 4:
#     for i in range(len(s)):
#         for j in range(len(s[i])):
#             if s[i][j].isdigit():
#                 cnt += 1
#     if cnt == 11:
#         print("YES")
#     else:
#         print("NO")
# elif len(s[0]) == 3 and len(s[1]) == 3 and len(s[2]) == 4 and len(s) == 3:
#     for i in range(len(s)):
#         for j in range(len(s[i])):
#             if s[i][j].isdigit():
#                 cnt += 1
#     if cnt == 10:
#         print("YES")
#     else:
#         print("NO")
# else:
#     print("NO")

# Самый длинный

# print(max([len(i) for i in input().split()]))

# Молодежный жаргон

# n = input().split()
# print(*[n[i][1:] + n[i][0] + "ки" for i in range(len(n))])


############################### 13.1 ФУНКЦИИ #########################################

# def draw_box():
#     for _ in range(5):
#         print("*" * 7)
# draw_box()

# # объявление функции
# def draw_box():
#     print("*" * 10)
#     for i in range(1, 13):
#         print("*", "*", sep=" " * 8)
#     print("*" * 10)
# # основная программа
# draw_box()  # вызов функции

# объявление функции
# def draw_triangle():
#     print(*[i * "*" for i in range(1, 11)], sep='\n')
# draw_triangle()

# def box(weight, height):
#     for i in range(height):
#         print("*" * weight)
# box(int(input()), int(input()))

# def max2(x, y):
#     print(max(x, y))
# max2(222, 11)

# Звездный треугольник
#
# def draw_triangle(fill, base):
#     """fill – символ заполнитель;
#     base – величина основания равнобедренного треугольника"""
#     for i in range(1, base // 2 + 1):
#         print(fill * i)
#     for i in range(base // 2 + 1, 0, -1):
#         print(fill * i)
# fill = input()
# base = int(input())
# draw_triangle(fill, base)

# # объявление функции
# def draw_triangle(fill, base):
#     for i in range(1, base + 1):
#         print(fill * min(i, base - i + 1))
# # считываем данные
# fill = input()
# base = int(input())
#
# # вызываем функцию
# draw_triangle(fill, base)

# ФИО

# def print_fio(name, surname, patronymic):
#     """name – имя человека;
#     surname – фамилия человека;
#     patronymic – отчество человека;"""
#     print(surname[0].upper(), name[0].upper(), patronymic[0].upper(), sep='')
# name, surname, patronymic = input(), input(), input()
# print_fio(name, surname, patronymic)

# Сумма цифр

# def print_digit_sum(num):
#     suma = 0
#     for i in range(len(num)):
#         suma += int(num[i])
#     print(suma)
# num = input()
# print_digit_sum(num)
# sum() a

# функция перевода градусов Фаренгейта в градусы Цельсия
# def convert_to_celsius(temp):
#     result = (5 / 9) * (temp - 32)
#     return result
#
# # основная программа
# temp = float(input('Bвeдитe количество градусов по Фаренгейту: '))
# celsius = convert_to_celsius(temp)
# print(celsius)  # градусы Цельсия

# def convert_grade(grade):
#     if grade >= 90:
#         return 5
#     elif grade >= 80:
#         return 4
#     elif grade >= 70:
#         return 3
#     elif grade >= 60:
#         return 2
#     else:
#         return 1
# # основная программа
# grade = int(input('Введите вашу отметку по 100-балльной системе: '))
# print(convert_grade(grade))


# Ф-ция вычисляющая длину гипотенузы

# def compute_hypotenuse(a, b):
#     c = math.hypot(a, b)
#     return c
# a = int(input())
# b = int(input())
# hyp = (compute_hypotenuse(a, b))
# print(hyp)

# Расстояние между 2 точками на сис-ме координат

# def compute_hypotenuse(a, b):
#     c = math.hypot(a, b)
#     return c
# def get_distance(x1, y1, x2, y2):
#     return compute_hypotenuse(x1 - x2, y1 - y2)
# x1 = int(input())
# y1 = int(input())
# x2 = int(input())
# y2 = int(input())
# print(get_distance(x1, y1, x2, y2))

# Напишите функцию sum_digits(n), принимающую в качестве
# аргумента натуральное число и возвращающую сумму его цифр.

# def get_sum_digit(n):
#     result = 0
#     while n > 0:
#         result += n % 10
#         n //= 10
#     return result
# n = int(input())
# print(get_sum_digit(n))

# Напишите функцию compute_average(numbers), принимающую в качестве
# аргумента список чисел и возвращающую среднее значение элементов списка.

# # Функция
# def compute_average(numbers):
#     s = sum(numbers) / len(numbers)
#     return s
# # Основная программа
# numbers = [int(i) for i in input().split()]
# print(compute_average(numbers))

# def get_sum(x, y, z):
#     return x + y + z
#     print('Сумма равна', x + y + z)
#
# print(get_sum(1, 2, 3))

# Конвертер километров

# # объявление функции
# def convert_to_miles(km):
#     return km * 0.6214
# # считываем данные
# num = int(input())
# # вызываем функцию
# print(convert_to_miles(num))

# Количество дней

# def get_days(month):
#     list = [31,28,31,30,31,30,31,31,30,31,30,31]
#     return list[month - 1]
# # считываем данные
# num = int(input())
# # вызываем функцию
# print(get_days(num))

# Делители 1

# def get_factors(num):
#     list = []
#     for i in range(1, num + 1):
#         if num % i == 0:
#             list.append(i)
#     return list
# # считываем данные
# n = int(input())
# # вызываем функцию
# print(get_factors(n))

# Делители 2

# def number_of_factors(num):
#     cnt = 0
#     for i in range(1, num + 1):
#         if num % i == 0:
#             cnt += 1
#     return cnt
# # считываем данные
# n = int(input())
# # вызываем функцию
# print(number_of_factors(n))

# Найти всех

# def find_all(target, symbol):
#     lst = []
#     for i in range(len(target)):
#         if target[i] == symbol:
#             lst.append(i)
#     return lst
# # считываем данные
# s = input()
# char = input()
# # вызываем функцию
# print(find_all(s, char))

# Merge lists 1

# def merge(list1, list2):
#     list1.extend(list2)
#     list1.sort()
#     return list1
# # считываем данные
# numbers1 = [int(c) for c in input().split()]
# numbers2 = [int(c) for c in input().split()]
# # вызываем функцию
# print(merge(numbers1, numbers2))

# def quick_merge(list1, list2):
#     result = []
#
#     p1 = 0  # указатель на первый элемент списка list1
#     p2 = 0  # указатель на первый элемент списка list2
#
#     while p1 < len(list1) and p2 < len(list2):  # пока не закончился какой-нибудь из списков
#         if list1[p1] <= list2[p2]:
#             result.append(list1[p1])
#             p1 += 1
#         else:
#             result.append(list2[p2])
#             p2 += 1
#
#     if p1 < len(list1):  # прицепление остатка
#         result += list1[p1:]
#     else:  # иначе прицепляем остаток другого списка
#         result += list2[p2:]
#
#     return result
# # считываем данные
# numbers1 = [int(c) for c in input().split()]
# numbers2 = [int(c) for c in input().split()]
# # вызываем функцию
# print(quick_merge(numbers1, numbers2))

# Merge lists 2

# def quick_merge(list1, list2):
#     result = []
#
#     p1 = 0  # указатель на первый элемент списка list1
#     p2 = 0  # указатель на первый элемент списка list2
#
#     while p1 < len(list1) and p2 < len(list2):  # пока не закончился какой-нибудь из списков
#         if list1[p1] <= list2[p2]:
#             result.append(list1[p1])
#             p1 += 1
#         else:
#             result.append(list2[p2])
#             p2 += 1
#
#     if p1 < len(list1):  # прицепление остатка
#         result += list1[p1:]
#     else:  # иначе прицепляем остаток другого списка
#         result += list2[p2:]
#
#     return result
#
#
# #Задаем количество повторений
# n = int(input())
# #Обзываем функцию
# def  quick_merge(n):
# # Генерируем отсортированный список на return цифр int(i) для i во введенных n раз  input().(разделенных сплитом)split()
#     return sorted([int(i) for i in range(n) for i in  input().split()])

# 23.06.24

# def is_even(number):
#     if number % 2 == 0:
#         return True
#     else:
#         return False
# number = int(input())
# if is_even(number):
#     print('Это число четное. ')
# else:
#     print('Это число нечетное.')

# def is_invalid(model):
#     if model != 100 and model != 200 and model != 300:
#         return True
#     else:
#         return False
# model = int(input())
# while is_invalid(model):
#     print('Допустимыми номерами моделей являются 100, 200 и 300.')
#     model = int(input())

# Is Valid Triangle?

# def is_valid_triangle(side1, side2, side3):
#     if side1 > 0 < side2 and side3 > 0 and (side1 + side2 > side3 and side1 + side3 > side3 and side2 + side3 > side1):
#         return True
#     else:
#         return False
# side1, side2, side3 = int(input()), int(input()), int(input())
# print(is_valid_triangle(side1, side2, side3))

# Is a Number Prime? 🌶️

# def is_prime(num):
#     flag = True
#     for i in range(2, num):
#         if num % i == 0:
#             flag = False
#     if num > 1 and flag == True:
#         return True
#     else:
#         return False
# num = int(input())
# print(is_prime(num))

#!!!!!!!!!!!!!# Next Prime 🌶️🌶️

# def is_prime(num):
#     flag = True
#     for i in range(2, num):
#         if num % i == 0:
#             flag = False
#     if num > 1 and flag == True:
#         return True
#     else:
#         return False
# def get_next_prime(num):
#     lst = num + 1
#     while is_prime(lst) == False:
#         lst += 1
#     if is_prime(lst):
#         return lst
# # считываем данные
# n = int(input())
# # вызываем функцию
# print(get_next_prime(n))


# Good password 🌶️

# def is_password_good(password):
#     cnt = 0
#     if len(password) >= 8:
#         cnt += 1
#     for i in range(len(password)):
#         if password[i].isupper():
#             cnt += 1
#             break
#     for i in range(len(password)):
#         if password[i].islower():
#             cnt += 1
#             break
#     for i in range(len(password)):
#         if password[i].isdigit():
#             cnt += 1
#             break
#     if cnt == 4:
#         return True
#     else:
#         return False
# password = input()
# print(is_password_good(password))
# # Альтернативное классное решение
# def is_password_good(password):
#     upp = [i for i in password if i.isupper()]
#     low = [i for i in password if i.islower()]
#     dig = [i for i in password if i.isdigit()]
#     return all([len(password) >= 8, upp, low, dig])
#
#
# txt = input()
# print(is_password_good(txt))

# Ровно в одном

# def is_one_away(word1, word2):
#     cnt = 0
#     if len(word1) == len(word2):
#         for i in range(len(word1)):
#             if word1[i] == word2[i]:
#                 cnt += 1
#     if cnt == len(word1) - 1:
#         return True
#     else:
#         return False
# # считываем данные
# txt1 = input()
# txt2 = input()
# # вызываем функцию
# print(is_one_away(txt1, txt2))

# Палиндром 🌶️

# def is_palindrome(text):
#     palindrom = ''
#     for i in range(len(text)):
#         if text[i] != " " and text[i] != "," and text[i] != "." and text[i] != "!" and text[i] != "?" and text[i] != "-":
#             palindrom += text[i]
#     if palindrom.lower() == palindrom[::-1].lower():
#         return True
#     else:
#         return False
# # считываем данные
# txt = input()
# # вызываем функцию
# print(is_palindrome(txt))

# BEEGEEK

# def is_valid_password(password):
#     list = password.split(":")
#     if len(list) == 3 and list[0].isdigit and list[1].isdigit and list[2].isdigit:
#         cnt = 0
#         if list[0] == list[0][::-1]:
#             cnt += 1
#         simple_num = True
#         for i in range(2, int(list[1])):
#             if int(list[1]) % i == 0:
#                 simple_num = False
#         if simple_num:
#             cnt += 1
#         if int(list[2]) % 2 == 0:
#             cnt += 1
#         if cnt == 3:
#             return True
#         else:
#             return False
#     else:
#         return False
# # считываем данные
# psw = input()
# # вызываем функцию
# print(is_valid_password(psw))

# Правильная скобочная последовательность 🌶️

# def is_correct_bracket(text):
#         cnt = 0
#         for i in range(len(text)):
#             if text[i] == '(':
#                 cnt += 1
#             elif text[i] == ')':
#                 cnt -= 1
#             if cnt < 0:
#                 break
#         if cnt == 0:
#             return True
#         else:
#             return False
# # считываем данные
# txt = input()
# # вызываем функцию
# print(is_correct_bracket(txt))

# Змеиный регистр

# def convert_to_python_case(text):
#     final = text[0].lower()
#     for i in range(1, len(text)):
#         if text[i].isupper():
#             final += "_" + text[i].lower()
#         else:
#             final += text[i]
#     return final
# # считываем данные
# txt = input()
# # вызываем функцию
# print(convert_to_python_case(txt))


############################### Кортеж (tuple) в Python #################################

# Кортеж в Python схожий на список. Різниця між ними полягає в тому, що ми не можемо
# змінити елементи кортежу після присвоювання їм значень, тоді як елементи списку ми можемо змінити.
#
# asda = ("asdas", [1, 2, 3], (228, 1337))
# print(asda)


############################### 13.6 - Тема урока: функции с возвратом значения ##########################

# def solve(a, b, c, d, e, f):
#     x = (d * e - b * f)/(a * d - b * c)
#     y = (a * f - c * e)/(a * d - b * c)
#     return x, y
# xsol, ysol = solve(2, 3, 4, 1, 2, 5)
# print('Решением системы являются числа', 'x =', xsol, 'y =', ysol)
# print(type(xsol))

# Середина отрезка

# def get_middle_point(x1, y1, x2, y2):
#     x = (x1 + x2)/2
#     y = (y1 + y2)/2
#     return x, y
# x1, y1 = int(input()), int(input())
# x2, y2 = int(input()), int(input())
# x, y = get_middle_point(x1, y1, x2, y2)
# print(x, y)

# # Площадь и длина

# from math import pi
# def get_circle(radius):
#     c = 2 * pi * radius
#     s = pi * (radius ** 2)
#     return c, s
# r = float(input())
# c, s = get_circle(r)
# print(c, s)

# Корни уравнения 🌶️🌶️

# from math import *
# def solve(a, b, c):
#     D = (b ** 2) - (4 * a * c)
#     if D > 0:
#         x1 = (-b + sqrt(D)) / (2 * a)
#         x2 = (-b - sqrt(D)) / (2 * a)
#         return min(x1, x2), max(x1, x2)
#     elif D == 0:
#         return ((-b) / (2 * a)), ((-b) / (2 * a))
# a, b, c = int(input()), int(input()), int(input())
# x1, x2 = solve(a, b, c)
# print(x1, x2)


################################## 15.1 - Тема урока: модуль random ################################

################# randint() ################
# from random import *
# rnd = randint(0, 12)
# print(rnd)

# Следующий код выводит 10 случайных целых чисел из диапазона [1;100]

# import random
# for i in range(10):
#     print(random.randint(1, 100))

################ randrange() ###############

# import random
# num = random.randint(5, 10)
# print(num)

# import random
# num = random.randrange(0, 101, 10)   # Рандом число от 0 до 100, с шагом в 10: 0, 10, 20, ..., 100

############### random() ##################

# import random
# num = random.random()
# print(num)

############## uniform() #################

# import random
# num = random.uniform(1.2, 7.2)
# print(num)

############## seed() ####################

# import random
# random.seed(17)
# for i in range(10):
#     print(random.randint(1, 100))

# Решение задач

# import random
# num1, num2 = random.randrange(1, 7), random.randrange(1, 7)
# print("Бросаем кубики... Значения граней:\n", num1, num2)

# В интервью с профессором Тимуром вы выясняете, что он хотел бы использовать
# программу для имитации нескольких поочередных бросаний кубика.

# import random
# again = 'да'
# while again == 'да':
#     num1, num2 = random.randrange(1, 7), random.randrange(1, 7)
#     print("Бросаем кубики... Значения граней:\n", num1, num2)
#     again = input("Бросить кубики еще раз?(да/нет):")

# Всякий раз, когда программа имитирует подбрасывание монеты, она должна
# случайным образом показывать "орла" или "решку".
#
# import random
# again = 'да'
#
# for i in range(10):
#     num1 = random.randrange(0, 2)
#     if num1 == 0:
#         print("Вам выпала решка")
#     else:
#         print("Вам выпал орел")


############################### 14.1 - Екзамен №№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№

# Звездный треугольник 🌶️

# def draw_triangle():
#     for i in range(8):
#         print(" " * (8 - 1 - i) + "*" * (1 + i * 2))
# draw_triangle()

# Калькулятор доставки

# def get_shipping_cost(quantity):
#     for i in range(quantity):
#         cost = (120 * i) + 1000
#     print(cost)
# quantity = int(input())
# get_shipping_cost(quantity)

# Биномиальный коэффициент 🌶️

# def compute_binom(n, k):
#     b = factorial(n) // (factorial(k) * factorial(n - k))
#     return b
#
# def factorial(n):
#     x = 1
#     for i in range(1, n + 1):
#         x *= i
#     return x
# n, k = int(input()), int(input())
# print(compute_binom(n, k))

# Число словами 🌶️

# def number_to_words(num):
#     list0 = ['', 'один', 'два', 'три', 'четыре', 'пять', 'шесть', 'семь', 'восемь', 'девять']
#     list10 = ['десять', 'одиннадцать', 'двенадцать', 'тринадцать', 'четырнадцать', 'пятнадцать', 'шестнадцать', 'семнадцать',
#                'восемнадцать', 'девятнадцать']
#     list20 = ['', '', 'двадцать', 'тридцать', 'сорок', 'пятьдесят', 'шестьдесят', 'семьдесят', 'восемьдесят', 'девяносто']
#     if num // 10 == 0:
#         return list0[num]
#     if num // 10 == 1:
#         return list10[num % 10]
#     if num // 10 >= 2:
#         return list20[num // 10 % 10] + ' ' + list0[num % 10]
# # считываем данные
# n = int(input())
#
# # вызываем функцию
# print(number_to_words(n))

# Искомый месяц

# def get_month(language, number):
#     en = ['', 'january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september', 'october',
#           'november', 'december']
#     ru = ['', 'январь', 'февраль', 'март', 'апрель', 'май', 'июнь', 'июль', 'август', 'сентябрь', 'октябрь', 'ноябрь',
#           'декабрь']
#     if language == "en":
#         return en[number]
#     else:
#         return ru[number]
# language, number = input(), int(input())
# print(get_month(language, number))

# Магические даты

# def is_magic(date):
#     date = date.split(".")
#     if int(date[0]) * int(date[1]) == int(date[2][2:]):
#         return True
#     else:
#         return False
# date = input()
# print(is_magic(date))


# $#$#$#$#$#$#$##$#$#$##$ Проект "Угадайка чисел" #$#$#$#$#$$#$#$#$#$#$$#$#$

# Описание проекта: программа генерирует случайное число в
# диапазоне от 1 до 100 и просит пользователя угадать это число.
# Если догадка пользователя больше случайного числа, то
# программа должна вывести сообщение 'Слишком много,
# попробуйте еще раз'. Если догадка меньше случайного числа,
# то программа должна вывести сообщение 'Слишком мало,
# попробуйте еще раз'. Если пользователь угадывает число,
# то программа должна поздравить его и вывести сообщение
# 'Вы угадали, поздравляем!'.
#
# import random
# def random_num():   # Ф-ция рандомного номера в диапазоне 1-100
#     x = random.randrange(1, 101)
#     return x
# def number_check(number):   # Ф-ция проверка на цифру
#     while True:
#         if number.isdigit() and 0 < int(number) <= 100 or number == "stop" or number == "стоп":
#             return number
#         else:
#             number = input("А может быть все-таки введем целое число от 1 до 100? Или stop/стоп, если хотите сдаться!:")
#
# while True:
#     print("Добро пожаловать в числовую угадайку")
#     x_rnd = random_num()
#     # print("Загаданное число:(test)", x_rnd)  # Для тестирования
#     number = input("Угадаете число? Вы можете сдаться, написав слово: 'stop' или 'стоп'.\nВведите ваше число от 1 до 100: ")
#     number = number_check(number)
#     count_try = 1
#     while True:
#         if count_try > 3:
#             print("Это была", count_try, "попытка, вы безнадежны, лучше сдайтесь =)")
#         if number == "stop" or number == "стоп":
#             print("Вы сдались!")
#             break
#         if int(number) > x_rnd:
#             number = input("Слишком много, попробуйте еще раз: ")
#             number = number_check(number)
#             count_try += 1
#         elif int(number) < x_rnd:
#             number = input("Слишком мало, попробуйте еще раз: ")
#             number = number_check(number)
#             count_try += 1
#         elif int(number) == x_rnd:
#             print("Вы угадали с", count_try, "раза, поздравляем, это число", x_rnd)
#             break
#     again = input("Хотите начать игру заново?(да/нет): ")
#     if again == "да" or again == "yes" or again == "lf":
#         continue
#     elif again == "нет" or again == "no" or again == "ytn":
#         print("Рады были видеть вас в игре 'Угадайка 2024'. Заходите еще =)")
#         break


# # Тимур и его числа 🌶️
#
# import math
# def how_try(right):
#     return int(math.log2(right) + 1)
# right = int(input())
# print(how_try(right))


# Магический шар 8

# Описание проекта: магический шар 8 (шар судьбы) — шуточный способ предсказывать будущее.
# Программа должна просить пользователя задать некий вопрос, чтобы случайным образом на него ответить.
#
# import random
# answers = ["Бесспорно", "Мне кажется - да", "Пока неясно, попробуй снова", "Даже не думай",
#            "Предрешено", "Вероятнее всего", "Спроси позже", "Мой ответ - нет",
#            "Никаких сомнений", "Хорошие перспективы", "Лучше не рассказывать", "По моим данным - нет",
#            "Можешь быть уверен в этом", "Да", "Сконцентрируйся и спроси опять", "Весьма сомнительно"]
#
# print("Привет Мир, я магический шар, и я знаю ответ на любой твой вопрос.")
# name_user = input("Как вас зовут? ")
# print("Привет,", name_user)
# while True:
#     question = input("Пожалуйста, задайте ваш вопрос: ")
#     print(random.choice(answers))
#     again = input("Хотите ли вы задать еще один вопрос?(да/нет): ")
#     if again == "да" or again == "yes" or again == "lf":
#         continue
#     elif again == "нет" or again == "no" or again == "ytn":
#         print("Возвращайся если возникнут вопросы!")
#         break


# Генератор безопасных паролей

# Описание проекта: программа генерирует заданное количество паролей и включает в себя
# умную настройку на длину пароля, а также на то, какие символы требуется в него включить,
# а какие исключить.

# import random
# digits = "0123456789"
# lowercase_letters = "abcdefghijklmnopqrstuvwxyz"
# uppercase_letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
# punctuation = "!#$%&*+-=?@^_"
# def generate_password(how, length, chars):
#     list = []
#     for i in range(int(how)):
#         passw = ""
#         list.append(passw)
#         for j in range(int(length)):
#             passw += random.choice(chars)
#         return passw   # for test
#         continue
#     print(list)
#
# chars = ""
#
#
# how = input('Укажите количество паролей для генерации:')
# length = input('Укажите длину одного пароля:')
# dig = input('Включать ли цифры 0123456789? (+/-)')
# uppercase = input('Включать ли прописные буквы ABCDEFGHIJKLMNOPQRSTUVWXYZ? (+/-)')
# lowercase = input('Включать ли строчные буквы abcdefghijklmnopqrstuvwxyz? (+/-)')
# punctuat = input('Включать ли символы !#$%&*+-=?@^_? (+/-)')
# obscure = input('Исключать ли неоднозначные символы il1Lo0O? (+/-)')
#
# if dig == "+":
#     chars += digits
# if uppercase == "+":
#     chars += uppercase_letters
# if lowercase == "+":
#     chars += lowercase_letters
# if punctuat == "+":
#     chars += punctuation
# if obscure == "-":
#     chars += "il1Lo0O"
#
# print(generate_password(how, length, chars))


# Шифр Цезаря #

# Описание проекта: требуется написать программу, способную шифровать и дешифровать текст в соответствии
# с алгоритмом Цезаря. Она должна запрашивать у пользователя следующие данные:
# - направление: шифрование или дешифрование;
# - язык алфавита: русский или английский;
# - шаг сдвига (со сдвигом вправо).


# # Аве, Цезарь 🌶️
# def ave_cezar(text, rot_n):
#     eng = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
#     rus = "абвгдежзийклмнопрстуфхцчшщъыьэюяАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ"
#     new_text = ""
#     if rot_n > 0:   # Для положительного сдвига вправо
#         for i in range(len(text)):
#             if text[i] in eng:   # Для ENG
#                 if text[i].islower():   # Нижний регистр
#                     x = chr(ord(text[i]) + rot_n)
#                     if ord(x) > ord("z"):   # если дальше z = 122 и продолжать с буквы "а".
#                         new_text += chr(ord("a") + (rot_n - (123 - ord(text[i]))))   # до юникод a = 97 добавляем остаток от шага после буквы "z"
#                     else:
#                         new_text += x
#                 if text[i].isupper():   # Верхний регистр
#                     x = chr(ord(text[i]) + rot_n)   # не заходит за границу
#                     if ord(x) > ord("Z"):   # если дальше Z = 90 и продолжать с буквы "а".
#                         new_text += chr(ord("A") + (rot_n - (91 - ord(text[i]))))   # до юникод А = 65 добавляем остаток от шага после буквы "Z"
#                     else:
#                         new_text += x
#             if text[i] in rus:   # Для RUS
#                 if text[i].islower():   # Нижний регистр
#                     x = chr(ord(text[i]) + rot_n)
#                     if ord(x) > ord("я"):   # если дальше я = 1103 и продолжать с буквы "а".
#                         new_text += chr(ord("а") + (rot_n - (1104 - ord(text[i]))))   # до юникод a = 1072 добавляем остаток от шага после буквы "я"
#                     else:
#                         new_text += x
#                 if text[i].isupper():   # Верхний регистр
#                     x = chr(ord(text[i]) + rot_n)   # не заходит за границу
#                     if ord(x) > ord("Я"):   # если дальше Я = 1071 и продолжать с буквы "А".
#                         new_text += chr(ord("А") + (rot_n - (1072 - ord(text[i]))))   # до юникод a = 97 добавляем остаток от шага после буквы "Я"
#                     else:
#                         new_text += x
#             if text[i].isalpha() == False:
#                 new_text += text[i]   # Для треша и цифр
#         return new_text
# ####################################################################
#     if rot_n < 0:   # Для негативного сдвига влево
#         for i in range(len(text)):
#             if text[i] in eng:   # Для ENG
#                 if text[i].islower():   # Нижний регистр
#                     x = chr(ord(text[i]) - abs(rot_n))
#                     if ord(x) < ord("a"):
#                         new_text += chr(ord("z") - (abs(rot_n) - (ord(text[i]) - ord("a") + 1)))
#                     else:
#                         new_text += x
#                 if text[i].isupper():   # Верхний регистр
#                     x = chr(ord(text[i]) - abs(rot_n))
#                     if ord(x) < ord("A"):
#                         new_text += chr(ord("Z") - (abs(rot_n) - (ord(text[i]) - ord("A") + 1)))
#                     else:
#                         new_text += x
#             if text[i] in rus:   # Для RUS
#                 if text[i].islower():   # Нижний регистр
#                     x = chr(ord(text[i]) - abs(rot_n))
#                     if ord(x) < ord("а"):
#                         new_text += chr(ord("я") - (abs(rot_n) - (ord(text[i]) - ord("а") + 1)))
#                     else:
#                         new_text += x
#                 if text[i].isupper():   # Верхний регистр
#                     x = chr(ord(text[i]) - abs(rot_n))
#                     if ord(x) < ord("А"):
#                         new_text += chr(ord("Я") - (abs(rot_n) - (ord(text[i]) - ord("А") + 1)))
#                     else:
#                         new_text += x
#             if text[i].isalpha() == False:
#                 new_text += text[i]   # Для треша и цифр
#         return new_text
#
# def uncoding_cezar(text):
#     print("Вот вариант(ы) текста зашифрованного алгоритмом Цезаря, выберите подходящий:")
#     list = []
#     for i in range(1, 32):
#         list.append(ave_cezar(text, i))
#     return print(*list, sep='\n')
#
# text = input("Введите ваше сообщение:")
# print("1) Зашифровать текст алгоритмом Цезаря;", "\n2) Расшифровать зашифрованный текст алгоритмом Цезаря")
# choise = input("Выберите что вы хотите сделать(1/2)?:")
# if choise == "1":
#     rot_n = int(input("Введите число ROT N (сдвиг в одну из сторон):"))
#     print(ave_cezar(text, rot_n))
# elif choise == "2":
#     print(uncoding_cezar(text))


# def cezar(text):
#     eng = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
#     rus = "абвгдежзийклмнопрстуфхцчшщъыьэюяАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ"
#     trash = '!@#$%^&*()-_=+"'
#     list = [i for i in text.split()]   # Закидываем слова текста в список
#     word = ""
#     len_word = []   # счетчик длины слова без лишних символов
#     for i in range(len(list)):
#         cnt = 0
#         for j in range(len(list[i])):
#             if list[i][j].isalpha():
#                 cnt += 1
#         len_word.append(cnt)
# #########################################################################################
#     for i in range(len(list)):   # Перебираем каждое слово
#         for j in range(len(list[i])):   # Перебираем каждую букву слов
#             if list[i][j].isalpha() == False:
#                  word += list[i][j]   # Для треша и цифр
#             if list[i][j] in eng:   # Для ENG
#                 if list[i][j].islower():   # Нижний регистр
#                     x = chr(ord(list[i][j]) + len_word[i])
#                     if ord(x) > ord("z"):   # если дальше z = 122 и продолжать с буквы "а".
#                         word += chr(ord("a") + len_word[i]) - (123 - ord(list[i][j]))   # до юникод a = 97 добавляем остаток от шага после буквы "z"
#                     if ord(x) < ord("z"):
#                         word += x
#                 if list[i][j].isupper():   # Верхний регистр
#                     x = chr(ord(list[i][j]) + len_word[i])   # не заходит за границу
#                     if ord(x) > ord("Z"):   # если дальше Z = 90 и продолжать с буквы "а".
#                         word += chr(ord("A") + (len_word[i]) - (91 - ord(list[i][j])))   # до юникод А = 65 добавляем остаток от шага после буквы "Z"
#                     else:
#                         word += x
# ########################################################
#     for i in range(len(list)):

#     return word
# #
# text = input("Введите ваше сообщение:")
# print(cezar(text))

# list = ["Sasha,", "idi!", "nahoi2!"]
# len_word = [5, 3, 5]
# word = "Sasha,idi!nahoi2!"
# for i in range(len(list)):
#     print(word[:len(list[i])])


# Аве, Цезарь

# n = input()
# s = n
# for i in s:
#     if i in '*,.!@"-?':
#         s = s.replace(i, '')
# x = [len(i) for i in s.split()]
# count = 0
# word = ''
# for c in n:
#     number = ord(c)
#     if c == ' ':
#         count += 1
#         word += c
#     elif 65 <= number <= 90:
#         if number + x[count] > 90:
#             word += chr(number + x[count] - 26)
#         else:
#             word += chr(number + x[count])
#     elif 97 <= number <= 122:
#         if number + x[count] > 122:
#             word += chr(number + x[count] - 26)
#         else:
#             word += chr(number + x[count])
#     else:
#         word += c
# print(word)

# n = int(input())
# print(n - (n % 2), n // 2)
# print(n - (n - (n % 2)))


# print(bin(10))
# print(oct(10))
# print(hex(11).upper())

# BOH

# num = int(input())
# print(bin(num)[2:], oct(num)[2:], hex(num)[2:].upper(), sep="\n")






# Угадайка слов

# Описание проекта: программа загадывает слово, а пользователь должен его угадать. 
# Изначально все буквы слова неизвестны. Также рисуется виселица с петлей. 
# Пользователь предлагает букву, которая может входить в это слово. 
# Если такая буква есть в слове, то программа ставит букву столько раз, сколько она встречается
# в слове. Если такой буквы нет, к виселице добавляется круг в петле, изображающий голову. 
# Пользователь продолжает отгадывать буквы до тех пор, пока не отгадает всё слово. 
# За каждую неудачную попытку добавляется еще одна часть туловища висельника (обычно их 6: голова, 
# туловище, 2 руки и 2 ноги).

import random
word_list = ['год', 'человек', 'время', 'дело', 'жизнь', 'день', 'рука', 'раз', 'работа', 'слово', 'место', 'лицо',
            'друг', 'глаз', 'вопрос', 'дом', 'сторона', 'страна', 'мир', 'случай', 'голова', 'ребенок', 'сила', 'конец',
            'вид', 'система', 'часть', 'город', 'отношение', 'женщина', 'деньги', 'земля', 'машина', 'вода', 'отец',
            'проблема', 'час', 'право', 'нога', 'решение', 'дверь', 'образ', 'история', 'власть', 'закон', 'война',
            'бог', 'голос', 'тысяча', 'книга', 'возможность', 'результат', 'ночь', 'стол', 'имя', 'область', 'статья',
            'число', 'компания', 'народ', 'жена', 'группа', 'развитие', 'процесс', 'суд', 'условие', 'средство',
            'начало', 'свет', 'пора', 'путь', 'душа', 'уровень', 'форма', 'связь', 'минута', 'улица', 'вечер',
            'качество', 'мысль', 'дорога', 'мать', 'действие', 'месяц', 'государство', 'язык', 'любовь', 'взгляд',
            'мама', 'век', 'школа', 'цель', 'общество', 'деятельность', 'организация', 'президент', 'комната']
def display_hangman(tries):
    stages = [  # финальное состояние: голова, торс, обе руки, обе ноги
                '''
                   --------
                   |      |
                   |      O
                   |     \\|/
                   |      |
                   |     / \\
                   -
                ''',
                # голова, торс, обе руки, одна нога
                '''
                   --------
                   |      |
                   |      O
                   |     \\|/
                   |      |
                   |     / 
                   -
                ''',
                # голова, торс, обе руки
                '''
                   --------
                   |      |
                   |      O
                   |     \\|/
                   |      |
                   |      
                   -
                ''',
                # голова, торс и одна рука
                '''
                   --------
                   |      |
                   |      O
                   |     \\|
                   |      |
                   |     
                   -
                ''',
                # голова и торс
                '''
                   --------
                   |      |
                   |      O
                   |      |
                   |      |
                   |     
                   -
                ''',
                # голова
                '''
                   --------
                   |      |
                   |      O
                   |    
                   |      
                   |     
                   -
                ''',
                # начальное состояние
                '''
                   --------
                   |      |
                   |      
                   |    
                   |      
                   |     
                   -
                '''
    ]
    return stages[tries]
def get_word():
    rndm_word = random.choice(word_list).upper()
    return rndm_word
def play(rndm_word):
    print('Давайте играть в угадайку слов!')
    word_completion = '_' * len(rndm_word)  # строка, содержащая символы _ на каждую букву задуманного слова
    guessed = False                    # сигнальная метка
    guessed_letters = []               # список уже названных букв
    guessed_words = []                 # список уже названных слов
    tries = 6                          # количество попыток
    for i in range(6):
        print(display_hangman(tries), end='\n')
        print("Угадайте слово из:", len(rndm_word), word_completion, sep='\n')
        wrd = input("Назовите вашу БУКВУ:" )
        if not wrd.isalpha:
            wrd = input("БУКВУ введи дурак, ничего больше!:" )
print(play())
